%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: actualpresent_ras1.dvi
%%CreationDate: Tue Jun 23 00:47:20 2015
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: CMSS17 CMSS8 CMSS12 CMSSI12 CMSSI10 CMSS10 CMSSI8
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o actualpresent_ras1.ps actualpresent_ras1
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.06.23:0047
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 876 2014-01-28 15:03:13Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.06, 2011/09/18
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  mtrx setmatrix TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  pop pop pop pop 
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def

 /pgf16{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf17{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf18{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf19{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf20{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf21{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf22{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash
3.00003 0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto
-1.65689 3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689
-1.65689 -3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689
3.00003 0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc
pgfstr grestore newpath  grestore} bind def

 /pgf23{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore}bind
def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave
pgfsoa .setopacityalpha stroke grestore}bind def}bind def /pgffoa 1
def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: CMSSI8
%!PS-AdobeFont-1.0: CMSSI8 003.002
%%Title: CMSSI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI8 known{/CMSSI8 findfont dup/UniqueID known{dup
/UniqueID get 5000808 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI8 def
/FontBBox {-100 -250 1135 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI8.) readonly def
/FullName (CMSSI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7F4ACE8E907D5EF95D
3D767387C90E3340F994983B26E5038E3EB949107C5C55ED5392BC8F10BE6BFF
024B7DA024C42E9AF989382A9374EB2235ECB8D3E676F531C893D3D5F160C3BC
69A45272FBEC9D30D4634423A1B22FF3768CB0F22028D36B8B8534FA62DD7EE7
5DFEE3411A25C4B2CDC4A55CBEDF5ED5FC4BE6290E0DDF41F6B0070810F96F2B
2E4D5EF987C11C31BAC419301683A1E66DC5A52B93D416D73D8B8439B96DFE48
0F080479FFF69E2F97BDF7944D73F55F531755FA645D37AF1A508F56410CF8F6
9AA2E6C87E7A802C7470F4B2742EB91C9CD3171253AA0C61BC85B59C1B9C8C1A
669EA311B271ECD3FB501A20E03535BFF043F326258B5738CCA2C9E375EAE10D
C99891F640D7BD20E96077815E2921DDECEC7DC2EAAD3A72840B378FC8EF8D4C
21E4DDA91D2EE5BAB4BC9C6CD6EFBCD4EEA34C2469474DA6818D3E0120A5AABE
DABD53296290B24B18A91093927E5C6D5626FAF70CB340717E4ED27F57E91CE6
01CA47D739EBCAF2991F58BCB09F3F12BB23D80A61E315DCF270AE3E74DBA3BE
E99D15ECC1B965F48442783DB0978A366ABD22EC999189168B75B08163C63E10
7AF0391C86471F56F9EEB994419EEBEEAB58126846E4EC066E4E81FC2C0A5853
8A7ACEA4ADD8F157C86A131FD8ECA22A2D7D6AF3DE989C90B297B57CE6EDA490
BF7F5E03B71F153A5CAE98F655E4010900CB5B7C4B9015CBCBB0426692A68DCA
AC3A9027B4E8D3CCA563F9B31F349B7A2E050E85A6CBE6BB8B3173B3E45B7E7D
7C3E23020C431AF58EEB4CC1ED401583F9F78EC63ECDA9A34D91E0739BBBEE59
ED973BCA5A43B128E467EF29074CA2D83E0826C01C0A5C1ECD79C4CEDBFA8ED7
9DA61DE7DD024F24F6FB3A3FB6D19045387DB75BB697F10E2B313BCF94B67AEA
32C89BE746E228C7350C9450B198581F6A293A9C48D148AA26D562632B052067
31603A86944A9386A480173360490C2EBA6B659275A5FFB5A8ADB1B70486D9AF
2B679682D31993B98C4B99E3826C71E04E2FD81E44493942B68D3192EE150289
74B37C28C833F8A14048E5F6F780FCE28E38B32FF8D3AE0723B3C1CA0A5C550A
013B63C8A08B595DC22DD7CCD8CFA1655FA2439E9CB048F485999E3BCD59FC0A
E0942984E2679A4A795477F6433620A679E479E0C3349641AEAC17A7948C911C
B9A55062A53311CE0EF67DC8ED11CC46D1DB8B3FA02B613AB701A8310AF78215
0E66FE01BA698D4D1BE57D31240DD20AF6864FD915D3154FA44147BED97BD86C
9F8D50CD24496A1C0235C6AD747D1DD1465B5339946DBADC561E300885540DA6
C49AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE447
FC64C4E76423DE98198BC093A636DF591877505FC6C9FFA590D30727E4734BB4
E6EE21BF4D6F9998F9E13C5CFC864639FA1DB6390631198DD5A4E83304A418DA
F28A90510ABC3A9290A76BD33643423DC378E8B15479BB5E92DA062AB6E33568
A3DFCAFCCAE6A87A86702D2A9EB6A1411293CC7389C2B2997EA9FA721C5D1B46
9C89BF6B41822709D1123DE671945987BB4678019A410F3F6285DE6C3924138D
62487970A8DBC4B3CCF78DFA922AB5FF94D0D0EA6942FD83DDA3E49E44C32118
9AC8DF24B4EEF2BC604B5C573FE4815A14C063E44AC8B465749C7D6F524816C1
AFCDF3889EBDA13DE2AFCF109DAB19A7158D5A6A86F941BEA8D6C1E41930F276
3542CA3C688872AAF9089B736986F30FE73DA3DC30D571E773925B86CC3A5401
422497BD1EE99B8CC60984585232FCECFB8CD7EA278531A0C19932D7E65FA260
08110E0CDDFD183F87F177C6515B4472D6FFCDD4659ED4900E4EFA450FF0632F
FBEA3829A63E6ACBD73B940E850F15478144FC91C0C6B65A3D21DB024AED7227
2E9CE60983D6781AC2D82DC13591ED2847851B38D6FF2C1AF3A177C1411CE5C4
77D848A72C4CA03B32AF94C0BD369DF16F84FEFB9DCF203616AE03B80A6CF276
A5FA2CADC85170D5E7A0F23487003CD0F57C409EEF9768F3E26CBE9327673F5F
3F8E258908B24BEE940432D5F5B7B537F8F178D6D4AA81451FBB70DF7DBA5141
49BCC342C9A006F075E3C5A4D75F1A972F492B5AB2CDC0010FDF8F8A6665D242
5DC50F2AB1D1C098E107F7EFF65AF274A947AFFA5151EAA0E38D584F4523ACBB
9CA3E8A7C78C0EB6BB75C44D60A811DCC5910978A6E62553BE1B304BE99BB559
7384232CE98EB577261419251FCFE8E37AA798877B1D1F1BD1D5C4D3E75F0A74
CC6D59E91F7124523DE23834EAAD90511C3F6E21D613B1BB91C601DA14449768
F2DD1500524476F3120F4272B995956428F130875D2F49DB95DA90DC9EABF7E8
C6FB98896D32F008BC6F44CE478EF946A6B3D0E2E8123782CFCAE81A62D6CF15
03AD9A6BE8BA27B98682EACCE341746E80D6B34446419A6E5680C60942B653AF
4B87765CA3DDA25D36949C24AB49990EDFA34BFA933C7BA60AB83A03D3321FA6
63FC28B76A147473B9DFC4AC4FB4E14B3E50138190BBD969BF137B90F88EF815
A2E433FBAAB2908CC7EFC2E76EE845A593A5C5C4891850677DF0A5B667A9AB2A
49BBC9B79553E5F14AA68A10D93F96F619700E5278D4B73CFFB60C115853E8C4
2045704D4E0861711A6D8286AA7691B7CD68C4505BCC4E39098B7D1015513208
7DB6E9513DCF3647266BF882A1DAB7DB72BA8EDF411ADDAB056F33CA16A8BB0C
74EC3A387612BFD7B47D8FBC321130B3066B454804E0A886333FD7A54F6C84B8
FB72399D9D1AD9D20D10058945FCE9387361C5A4C834114B7F35A01DC1D94CD9
32AE0A329943D48F05B3B7BA1877798A1B78CE5FF4A31D024A7F02D1784EA28E
4AD7C665FA13B93475B263DD24F362A44E1C56AC4045C1977CE1A859F852140D
A07C91295677E868E700352F9E195804A8D1B906594B3DBA293BBC87437D4525
96244D7F4ED03C1510601CCCEDBEB66B3AF0447ADCB87B1004D67ADD41512BC4
64C17AB21E88926F88486E8550D980941950C3B5CF567D17751137B2010269DC
F0C5DA0368B5DAA2DCEB8D1DFFBDF2DB214D1E73D943DCBCCB7FBA14418E4808
81DF9B8D60EAE203B1C1046EC4B2F0932986E03736581E2680CF0676F934CA56
C07CF644F6AB64756E9C016DFF6052B8BC9193EF2A8EEB5EFB5096EAB6E439EB
1CEB16603F0A525FFA7509CA17FDEEDB2052FA61666677A3556B38EBF9FBD242
215E3D083011F6AAFF7F534FD32519FB87AF4A41C77504F56703BA8B2583938F
7009C71963D94C91082918500E4320491500187032623DABB91AE4099482ADF2
AEAC3C50EDE1A33B262FAD61B8BE69A4B01A4E9B60306CF757CF01709E52D687
5DAF31C7178C962F27AE88FCC5F7BE159479AF03293563C37EB8F79E234F05AB
1516AF56212EB816B7B80C872F2F8BB510AA98E19C2EED6D965DA5AA5CC43470
D18727DF7940B43D62ED8BDE90B8AD9C14FF9FBEB92D2052FADF7A1C96B52BCA
0620A2623B9D25A81751FC60E9A27FBCF995B9F816BAA3733D2946655F991497
7F9CA776C7A9A1908FF4CEB0DEEB8316379CD8F6833906D0C5AF68E424F62ADE
B8861EF6C4644A2A27286DE776F5A54C90C33E5710E6AB8091C86A86964AA279
D92B91D5C8C9B74EDDD5D3553EFA1B1973B6FF49BDB92E0C18665201BB9EBF9C
C779C8CABAAF05A0CE11BBB581FC0AA1CF7F7B3ACB85D48B70EAD7B555AA243E
65797D3846876B60941EAE2980F3CCA18ACD94C4B39B476EC42CB2AFCD8B83F5
53774F74FF8F317E98CE93B48B27ECFEBBEBEB3106E3722B6053B5BD96200028
328FCE620EDEB9294C986688F1A71063DA2258DF8E25FBAC17E2021C981F7F27
A7F3C2042C1F567E4EB67E410D20A3962662140EC73D36D041803AAFF64257F4
C0808484C8AC6C25E3D23E97ADDC008BD27163626A3CC2829466A6539B75CB6A
E249172A5523779E7DC20BF2916F6DE1033062418B3EA1EB48FBF2F3A30C9FA2
506BD55D136BF911E6D7B6D4CA2B5F4473316A51A1527F22343BFB159038AD3E
102B83AB7796C78FF192A73BB713A3FB3A7507F659CC3C14DCFD076FCEC0E24C
9A3F75BA90DC175AF0557451A0048DE14D03F3133E687624B1FE77208AD8CB42
8633EA109BF1BB84A58CDE3166FC7468C17849C9A49EB8264CBBE15C3A58132F
561E3A403E1D2FA256954720B4C1D8FB7496B52535483699ABD2BE797B1A3759
118C7EB3C4936241958C32DA6FA78ECFEAD0E2B1F752C1CE761264843E776452
8D1CE6040F6471CC8D931AF1F50554912FF28C0D009F2D8D1C38C94A0BD73A0C
9159A8E75B4F8653F3F3AF30FAC387B9984F78CF28AAF34BC66E14F655E59153
0CE97368A17F5A33C6154D80F3C3FF1282CA4B53AF3279C1415D122AB2E159CE
561A160A52A233F913B6FBED832FE8EA5D7DFEDAF025097800D59C5204ECE9DC
AB2998063339D2F35C55A5B1025ECA6D0777DAC25CB773D92F9AF58F62C80481
6C734757BBF5D9385F129C7BCFE3B63053E8F30F652C81C17C6D4D2A87D0A900
1B00FB3F203BB09B49D5394FFFEFE77AC70F0D4A8CF5537523A461AFAF503C78
1AB2E7C60493B7BAD7CFF2C57A6A1AFBBA33B82EF7353BA3962128C473D6F47E
CFB11A039612D0AE291BCD1413083BC4FA5EA155E11798FC9DB89CFA81578C2F
76FF5F0DD71D0FD17ED37FA3CA3369BA59746E547ACDE18A558D80F47CE20381
B5C377AB0704C33F71B332442050297489DC376C776160DFB4E13510D17FE2A7
DE9CF4C7C06114694D48A28D27066E4F72EC33DA76F5162A75CDAFAFA23949D0
ADB5909325CB174D41E00CB6D215C63968DEDD7E4B614CFC90321881C0D81F46
1ACE669F3E268F89C5ACB66244AB801542AB671E83A63E3A05FC1A46FF0AAF78
5F5EF9C347DC0BD768EA27E177E0EDC516CD6C6E33629AD2EA37DB776F679AA2
D609C844F228B1A9E621B8923FAACB1B2A90CAC1A75B8F08D4429D25BA2455E1
03AD85F26430A971719CD9ADE0B67A4DCE5A00E15980F72D20B07C84F0C6F685
9FCB6A06030FAABB8D704BC9EAFA26B42B9114F36B9523749109C04723B29A04
EDD3F3DD4F2EAEB87157D2491FFEE09594E7DAE640F710610308D86E3D6D4D50
A7050E627BEA62CF2C66DEBF69220221CB1A195A32121A34D18445746CB6AA87
CFC5AFA8FDB612A78756BB4D29A619B031E979FFDC9B35415F7EF24398041D08
9A738F0A37C566CF8CAC64ADDFCF5A10291FA88847058FC99A43121CCCBC1059
DA7F4BE39B70DC469D40301303ED32A7EF14C4B9474CAAB02AD605EDB1D1D614
7E85471677275B1745CDE7295EE9A410B5A6FC005D009AF762F9EF7497BD43D7
2322D5B3D6525C133244337F3BF228776C42BAD9E12D6D0AB7F9870FE64EC39E
AC4B92396F5CDC34495957FB94B9888081AFD965A00BBC5B6750451D31B87858
6C5D30CEE24B216584C9B44775223DF5A18B6928CF4AC9C2B13E6C18B3799E3E
CCB8BB9436199166D75671DE04E604B39B566CE75840C8AF7914AC4380DFE875
C12A66B2A583C08BEC6FE29F895400C6C21D50B3CF549909FC48BFBA1BB5A92B
DFA4905E529C70C9B5C54314A58E04CD7EA9EAA813DA87897736DAE66F1F99A8
1BBA325F0EA7A23060DBDAA864F535BCBE54D23BB1914FC5985236F2BE93CFF4
97EA426F863BA392982083968E25122E6101342FBBC12D5B7AF2705F6497B3E2
53C7E432E5DF6B61BD508E6F297A617D863E7FDAE784986B47EFD87E449835BF
F135D46F3E02405D4149BE6D5FD2B693AC09EFC4EE1CAFA4AA4AA4B0826FEC8A
5E04C9926DB7CF861E6F8BBE8B3C70EF07814A5740B9AECC0025C597DDDD9E6B
006F14755486E4DCD38D801B05F58469DC0CAB452FC8B48AB8E5F5AE346A6EE5
8851BF74C4BDD84F46FC3E233611505541012258D9EA9BB8CCFB88DC2F425EF9
C128038F8C95400E6E24238AD20F17EF48C1DEDDE8A4943008E3B4BB66C1D672
2CD6E464001EE18DF2CCDC22B184EBEF71BDF82B9873FC3F0B6EA4A812BD7E8C
C8F9449211984C8CAFF2097A9243D920AD9C8BFBE2928E8C79A84345CBFEF14A
DFA2D8D078ABD2AF9A4A73F79B21A7F2E8FC28D01D95D4983EE2DA67735DF7CE
381D603B9B1206D4AD1656003DB8DD8F686BB2859D938F54074AF8F6584D122A
9538CC5ED97AEB6365998D12B2D1854529AA52950CBF21973604C577B6F1A185
E2F11F1B9BD4339611BD2727362273C9BE6DE9831D49603D30632567D078FA83
66F0179132286731ED10FE05E6512617152311FE9A70884F8CB6F303765940A0
4819FFD462917FFBD588475BF7EF24D19A5C4C35CAA29614CEFADAFBD500880A
66A5022FC20F36114FF6F6799491D1898354E3CC39987C8DFB5D4FD605C76094
6AADE9D9B331102B88879A5715832764A64E9AE3D9C3288CA76CDFC531AAAE42
C9DA44185E5DE1A3BC7A08F22BC14C34B0319786A21251995512710A8C1EAAF5
14479A9342181EBCFF0DDC93564127A1EE53F5A7FC71D311950C6A76E5F8C183
298E16B31234EEB0F10ED30ED08BBC190B657CD51C69C5BF1B6C607511832F8B
E694056FBB753E5FD8B35402295E5305D12D1E856E777DFD2C0B885A4EB84515
D04301F4AFF70B590B8D520565B57AC2D4F6F033BCF873B61D7080D0FAC5240C
EEFD3285CD52483F172E20A17085A69F23C12B4E10C21797FADD653E50F2A372
18DBF349C8257918EBF9400400A96E2DABB0A5AEC4E25334B1D9C2B6D47BB7CE
D68DA559F05B1817C34FEE6884A545A9DF698C9FE95C11192A124278890243D6
D09923A9CC287ED2233DC6C11ACF910DF593C3C6585CA7C8D679E051CEB635E9
ECAA5FFD70265235C289534AD65E209ACEE4D4B772F49558BFE675D7198AA28E
DE0D9C92E39DA2299E12C69431AC2C42A737EE0F4784B14FD544C70F4520E5CE
6BBECECB5CB3CC4F85C8A7F259198C40F8686E98953A2AF1A7E6B48A40513F9A
9583B5504518448053F35CAF8BFAA9EA20DDD8A0E49FA5B084AF43B318FAF385
F34D685151939FD2784DCF97994476D85DE98CBBA0D7F6FAAED2A6ABE14AAA2A
B954E2A223DC22F3D268DB1B85D7F169575F3513CA99951A18614BCD54A8AA1A
F324D723870087B92E05EAEE2081C697F00B590361056DE780C33D0290CF66F2
57E223C416138FE974C66A267A6C8549E0584019749B81C5DFB8E0B6947F1A81
B02AFAEFEEBD02273E6072C22F581E1D9A10B55628ED03736FAA03854784C252
A50085F1C008D56527B4C2E2FAA0A42C9E9871368E653A0B16356CE0FBFED150
EEBDC2CC0E26953789F92F15AE9C19B29AF6EC0A4593782A599B1207F7EFA824
D8E5C2C5DDA6C0E18DD3A2A6A0ED9EF3EE7FAA86EF319435FFC8189C5C3E15A6
D3F668B023E631D146CC8D5C9E6041AD6B07C7533F6AB848E296D83A2B530C44
B73A5D2B48A554C5351714C28B6615915C568F3A5CCA67ADF530C8EFAEA9E220
9449D2B2747D0AC3B46F44C36B0FF273FF3E2BD4C9161EC444D8FD38DCFA35DF
7D956CE18CED82532C40EFA25C2EC1F658A0DEDDC8EA3AE9CF3B12889AB6CD0B
DE7D23097A973B643F3DE8E97258420F9BA2C650759F636A62DF3DC6E4DA8124
8D980C452C638A9A32907BC6ABEBC72DE6B731192CD2CC749C55056AAC333473
EDAF840B31E08031DB686D51ADDAF8F134BFC5A88A53C4784C9DC0D0114C8B49
875196C84DFD9A086884C6AD13ACD5A891975819549C86332833AE6FABD7868A
30C9A3939D09C0A4F2BA13A51689DA1159B1273D97A29167B532D8187F13B996
DD49574C8329558BDB7C8FD159F47E3F27682A09F10EAA7620CC6B079624A3C7
A19ABAF9C6ACBB790FFD8E13E483D3EB22632D13141CBC36A11B6A3BE2ADF9F7
4669DC9F045E8644CDC4268863720305085C7B1B2AC08A74E548F7FA26767164
2361DAE6D309FE180089209E06F92CD48D746AC194AEB443B6923CCD6CC3646B
14997C66FF43712DC8239EEF5B939ACA3CCA841CB7D6A7B7E0359CA86D9B2EAF
31E3C9351AC0AD03D0D846FF5A84E774F9581A360385942D5EDB759EB28FD94E
B0D35886741463E26AD650C6BD8363D9C78F8592C48156A6F5554209249CC44F
53F46DF4EDC3C7BE33148C83088973A7749C86977D4AE9B1F79225E31F5A9649
64E79FFBECD678132F8172B8C1CA235008C08F25E81589B1CD4E311023D3E870
AA66DDBB7F39CE4805D1D11A476F5A0CFB5DC654DB3EAFB194CDF3AC669029E3
6243AEF95A48DE1686665CF9CDEC88583C22EA47CC68B5D4BA47BB309F06D1D0
14CAAD3BAE434F7919F6A735B4677DB9C4EE64CED36CD4C8D611AC7B52BFB43A
99F474091FFDBDA4587D07CDC9E2FCFAD4A1E746DA22C30DB61490C93279AB6D
196B4DD4E115242B19CB78198A4FA471D6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 55 /seven put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 110 /n put
dup 111 /o put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C9CA9DDD71F89021BE238E74781A92D64E5F9E5
AD6C0D954C6686C714BF189E78EE47F1530CDB8376E52631A1A26E3021FAB977
DBF01167266AD68A779C0180E034A90CB77B86747395BE885E484BE4028B4093
8BE191D58D0BF85308C72E6384292A2E1CD06130A091F8AF9DC6C3E12B1E4BA2
BB2C37AB4AAFC0CCC7964C06B9EC1C7E3951A85D8BFC4BA4ACD96F05F013E730
C33A922B6A837C8D8482EFB5229BFDD8109322DF8CEC09134FC74E959147DDB5
22CFC58C3432E6E2A081E618F0BC970E64F5828AD76E29AA4A88076DA662F02B
944B56C70405F8E44C78298B4E405642D94174E6AD3B991C86F457EBF59F3F29
0A85153D55CFCC0DEA35B35ACE94556488EAE0A3C37ADFB0F2CD2815C6A47E8A
B713641ACAF379C4CCECC21217EABE1557E56A46E7562A4CA0E8104084C3A43E
FD3FFB1A65A13725950E3F82B6C522D4AAF125ECDE40144F341CDA906E862D8B
0949FD3F65C77C25FA56A7B09023F6A0E4F1F05D4EAE18015832DD142087092A
B3C9BF0811B7E65A3A79B56E5AEB4D6C075F73308E3752C66D15AB9B7BC8F703
7F43ECCDB5087B0C14946DEBCA073B8F32B24EEDB8CF3F11E2F812F7BCE45704
6B48DD7AEF94A388E9AFF66C9B789D418AC77072ED3DDFEDF19838B9E57A3BA3
AF70985916CC705DB7D95978017038CF5184301A3A7569C2351D66F3F9E8BC0C
C1B75167EC0C165D5780E6A912C1995C4FF0165297CC8A2AB25A26954124ED0F
4C5247B6B9396D467313BBA3BD7C388116AE6D4D44CC4DD20956C23567992C20
91EDD38531618470E6977873A7A3AAABDD32A1BDB79BA7065B77CDF6318789F2
79E3D5CD06B09E84751C112AD301055641C92D2AD2E756D25D4157EBFCD63C01
F7A78E8EBE37E9D8233907331801451423E71AF0CE831024DD01A984AFDED606
2B2778240C61CDD3DC3B9721FC73FB3A152B9CE50C40F8FD56BAEB2143127B40
1BE50D7B1684868A616CEEA9B96ACE69F352DA2FA126515EDB759EB287A58F9A
38B0BE646E41F0E12EA989D361244D138B23E4E67B34D09590EFCE86642F450F
A3AFB661250DB73171BC1B75A25D68DE85C36BF26BA5CCAA52C4C38BDDEB5CD4
D6200EC1CB840985A9F498D559D2C2E0FAE5DD733A0D86C616F6A051B2B7E5E5
8542EF2790270F17ABA9066269D0D1839122B5B35F81CD65C961DFA7A9D7F424
24176929DE4DC85A8B133EA4E35A8C6B937C4421E1544743D410C0C43E7DF848
4F9C1D5EF125776AD1C0B210821A1B0E3FDA71CC26D07FF1A292D4D748B3E51B
1D8A7CC0A3C4B61590557C3FC258EFFC207394A558EF4A90D22D399668E95EE8
AD9DC3ABD11284214810FD34A4102C97EDE47E73EB81C0743D049A1F2B24656F
A45EFA2D2AF077123F2F67DCD428FB158A85F85AAD634C39350B6FBCF21CE162
CC3B93F9E4EA8AB69640295B66A323EFEE16E1262E22BB5AF56FD864BE572B05
585D646C73F05BB3A28F6EAD68C401FBD3403F012A2DB1C9F9FF6A9D3EEF2C1D
3FEDE9537EA9FEF3AAFE17FE8AFBA273F4A54502D7397AB234E62CDC88FDDB68
D239509A94A998E578CE9FE8DD6CEE8FE61F84BED6A52F06546A6D07C9FDFC1C
3BD210DABBABF4DE944046CC429FD2D2BFB9BB878745FBC36C28A5A6B35D98E5
EE52C6D3EBA6410DD85327CDDDED7B41248B6221ABE288B846A5A6A0603397EB
668C742E55F369DEBAF02D22162BB81FA8902ECFA109DC2DC9AA6A19AB03DB7C
65046CFDE4B5722693B2E7973FA0973C83EA31DFAFCF1836925ECD07D31A8D8E
F8542963A342B7E934B0F51C0137B0FF03EDBCB402ED6DF4CD7D0A60F4C4BF61
40C78EFFC9A7819A05D0E8FDC0DBD3D00EF53416AA698CE09E02BBC2CCBB3A05
84DA18F84576D4C3087D5E89F30359B876FB99F11363AA077E575F0E47CC02E3
3A4782E70883325FE771F931288D988847F475D37556DD8527E29904F5F16383
82593B7F2C9ECEA24E8F7C6497F69DE91DBF9F4A7A76
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSI10
%!PS-AdobeFont-1.0: CMSSI10 003.002
%%Title: CMSSI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI10 known{/CMSSI10 findfont dup/UniqueID known{dup
/UniqueID get 5000810 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI10 def
/FontBBox {-97 -250 1077 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI10.) readonly def
/FullName (CMSSI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7E94DF619E5D4CC604
78288A019B254A5A0A8E2D5ED465C9DB3CFEF0F444DA2A7DB2022495EA1B3FF8
BA3E769C503BAC77336BAAEFA8F7B4BCF9BD63253ABE621C7C696DDD22E0EDDE
ABDE1706338BB5F604B4F42356E2A96751B8EAF1112A1BE30B618E7F7BAA96CC
A264B5EA7138FD007E2CBE19B1F008AE13B47252D2956A06299FB28035624C39
08E9E5A4BC08DADE08861DB9940F6F0FA67E97E9A73C9F41525E865D0BF68F8B
6D48D1595EB69B3FF78F5F4B18470370BA219A010F9B5EA904289205DF20C7EC
91A2B866BA05251BD3D00FE5229CE2D2F220B6E25DA5B3C0EAC68979BB312E2C
532264814FF214CBD46C8B9C8E45878C9E28FF334C5CC7DF9D378EA5A37986DF
0450E2D5645371B8C577C28A008AB7A702E89FF337A17D05AFB0FDC55856AB3D
FFF997FF51AAD70FED81A5D307FFBE26E862070E361DDF6D162934B7852D2FC2
F3FE611F218E28CE0B964BE311E59D8729C7C0FC2B2D5781F73C87D64E6388D1
D7798FE70E74E76368174F5E055FB8CDA3809536768B0E6028826436C7E6454E
895EB7E435FF8AA342BDAD46A2C7BE5FEC83B8AD16F2C773F55F58870E70F2D4
FFCA12D89B06A706CC204383C0238C17EFD01E0118FA4CB77681CB7260BBACE8
30C8E7B16669700F884F234C36EE9694841EDD4FE5644949AA28AE2745FACFDC
CFEF1590F99B0DE494BB0851205DF4E7F2EB88CFF794DFA7958F6EC9197021DC
D4C3590B2729779345143AF6C349CBD2F17AEDDDC23AA8F0998C27170C44FE2F
163C1E2FC314C6CE27D6CB497C3A12F6D10B92D699E1578C23B5D9A907EEA297
4BF7D5C4ADFACA310E61EBE5655745FDCC48B661CC2D3EC016A87632AE410B69
C2B98B87D3F46491EE8611E31CE17843B05C05924FA42FBAD7687003C14599DB
08D72670855271EA55082BBF6AC146D452C1531338138D9AAC7E4D2F0CA1FDAD
11E4CB830A9F38A83999F6F0ED15D12FA631B8604D4E3018E625C8BABD8E1075
93F5E17CAD3CADA2210088E71C02CC6654DB4E12F8C2B6B7EADE37E52FAD3FD5
83E45B62FC9B573A6068EF3B43856CD4B6C3E096BA93728B05AEE2BB96C60AEF
58214FD24DEFA63E3FA299289B211A57E4B0CE9EB58414FB78E20151BCED3F4A
9AE6B1D7ED559B3B619385AA8496D6F56D2B353E4B1BCCFA0A50247E283B1540
4300E1119F710664ED5DECAAE9087B8C0CBA63F3FA09F217757B8448D13648BD
D16FEAB50D245C198EDF27C8628CC7BD02385EEB04AF8F4C76308BEF4D640C8D
6F2FDA7BED98F1498CEB1226F009BFAF6425265EC0D13FCACF4909B7495F4211
BA32B04A3B0BCBAC89D6A9088C47C47B4BAC36FB59D9B5D73B2E9E926A9DD183
1AE00AC58E9485379FC6DA119EEA3F6E478F22B60A464F192B2F43379407D4A8
795073B4309C27D8E945468055493D0204B4A57C39CFDC951A04E0288775FCFB
DE3993852671BE697999C9831A33CADEA75B369C179EB8A807CFEEA5CD97BC55
1B0EE49DCC4B6BF4137124123626A5C91603B01B4E0AC759526C129F6AC5BE74
B77B4E431B596E29C17BCCD1CE8279E9C00DF7557AB25770FC9B02762D7EF141
84FFB4730BB8451A485F784A34647741D9B8D2127D158283E01B38BDC39BFA8D
EAE249871ADB347827989E11FAC23F76C2389F8E883B01FFD1EA4968B44D1B1D
760A1FC8F79B50385D8327D6A6381923BE9A2FB8AB0CC6ACAAF5C7701C8F7BDC
81424F63D2CB312235AADD050FC4B71448EE02B7B25C82B6BFB070261919DC1E
32F5E6DD4C38691581D472C254BAF83D7F568016B5AFAEC895187E88AA4D05C8
FEBB3AEBC348AAB84907BC4D85C1F888ECAA5ED2714598384D7369F5FBA0B92B
ACA0B6BCD2D22F9F10B27FBF11A8AF204794CED402A3597D2D469A99CE64BF1C
9242867251B8EFEC0001A1ED0F470A4346BCD9DA22C005A079EE1DE3E33970FE
56620C318D2FD3DD9DFBB773B4FEA7FEECEA9FA1923AD4B2F49DAFEF48E1C529
DBE9EC77299E02DEA39C7B91F9E4F6D68EB224F4555F53E66CD00326CCB5FBAE
70243CDD407BE63DF7BB85E70A99F8B58BEC1562C290D8E50666E1E4EAA484DD
487C567B7BBFEED34A65A6407E3D8925E3C667AF40DB0EFBAE2C07EBE60A83DD
C1A02842861C994C4D314A87986CC94EE74DD4E29AA9E70F393CF956D3BE586B
AC618055571DE00541BA60D022DB49CB62C13FFCB3932DFBFD2D52C8F0C72F1E
9337D95767E376B80AB35264405CC5C385ED6DC9F95535E00C5252DE66961AFC
BC7C83ABFCFD5E0A055E37E7D261A19039D47EE792CA30EA673F80C48C0EEB20
DB21686ABD169A45DB94E35FF086C9946F51409E9E0836041081B04F861838C1
87157DB76A983928BB4122798551318EEB70A32C11A412FD56B7805BDA93AFCD
B11D35FE799224AE30C3BD09D971AC651D06184FCE45D898D09685009DA35EC9
CAB63751F8241297562AE2FEB577AB074D36381B0E5FC0DD5572E3A3079B166F
56C42FBE6147FBDC7EC2ECF6380A70F87D1E44CFD02A70BB3AF4BD9D350C7B21
5DDFD4FE288F0D9EB2FF4C24612FA759B41D0854C04163DC973570B974BAD7B7
BF766AD59D543E808E8F56F831472ECFEECFA7BEA74CBCCB025AB04079AE0838
75852BDC83E1D723824761459DA6A8920A27282043C38BDDB43157A70D552072
400E84CED5FDFDA0F09DF94431956F304F6E92F3DE5F99874F995B467E2038A3
B9C787E650C4A31B2FEFF078BCAC93ACA5816F5DC3FCE322C9DDB15E34856182
BA15F2D56FF4E91573BD2D8B34767974BE928F10EDB3525C2B259F320DF99B88
87801826F2B6AAB2C178270B27730496C44CC83C8036EE6D7D33D6D4C0D871A3
62B7BBC8D8A4E86AEB2CAE76CC7B091B7DF5516EEF043C7D2727FE569B2E28FF
F6BCC6FD3696A85CF5ED26571BFD346494CD6C0974BDE257EDD4A2C53C70FA89
C81F9D32F5CCBAB39A7C00A1BE116FA1254F291AD26C1DE4CBA27BC03C5E5561
8E960A7169F86C0DF884419ECAC607FA82B00CE0B41F7696B2C384582AF6A986
5A9FF800D3A1F4B6C2524F1A4300B9FCDAE2C2050B9882BE4F512FF539FA6BE4
C9577484EB323E7BFA5BDF628875A3634214B14947F7C16541CCE359F72A0E27
C0DB4CCD1653693F7D0BA68D02D5A61AB516173E794BBE4C2C3F34ED9C33BE3C
4A9E20A687498DA1DF7BCB1F6C595B90A5730A10070A54180318A1BD01844585
E78C6EA28EEACCDCB49F1CAF1D21EE97B1DF74523291FCE2ABFE2C000E8F061A
7CAEA494183B9261307CEAC6CD13B362130AE56A651DFACBBE7A6F6747CB61BF
F94BF393769F2A1BD493E1E6502A3507416984FE0F7E509D901A106B857E2448
7284E7ECC2D316EC1C54EE4FD7DC9972DE33B46356E414C92CF8DF9E472F7FE6
7404362C8DFF6BE223B8886503A83A83348F7E9F88726CE068C904D45496494C
641E4443D9474344508ABACF3FF3424383D79A8BDFE6E9D9138E660EB3FFCDCF
8F4E01B24B3070E8B480064D946D0D200F4468EDDF7BDE9D3DAFF03B6D8165F4
0CCB584D542D40DC72554A7597A19EFF3BD72B8520EA71A51048F15E2CA53F3B
C3432278CC19751B38AEB52534BE6CD9BBD489444D313F8C78C2C252AB25AE6A
5EC7D05F3FC21202C4B30A7FF9E1BDC6AE3F6B39B1E09F65E95292FBB1915D20
44D7212A60408FC0F5A2E957BCEBE93DDDAD35D05D23F7E58A3602FB3FC1D431
754A3A21F181C437437D7A22C402DC82275DE903E256979985B6E794B459FEFB
393317FE573DAA5416AC52AED36AE9E79040097E2BAF6A0C6CB68C346E4EB059
5E8A6AA1C751CA4A4094257C39ED48FE4414BE73B4E0BF6394FAC05CEEFD1C3A
F5F5233CEB4625752057789ADF113E1E2F77F5B471A0AAA761AEB46CF37C2360
E701B0DCAE13D4583D8DA516BE2E264230DEEE5053AED15368B6CD81DB761A49
9987A07FC48E1EC246D04D80D86B32F7A093AA23B769B0DBC554EE48DA202C28
55847E3D36D80B7C8E779DFE6EAFE3EB35811A1EF80DC639195D5810D90B4DB9
6BABF8F4468AD92939567DEB43BB00CADB46964B73AE13ECC82C3A57A63A23A9
92A46206C70B027CE34FB81E6919828462F8C2166AEBE9663259CE5D4CD8084A
8BA479CDB203F1B0C3579B3E0B8B8E7AA616D798970A11423C391C25EAD95351
A46A856512518A92C7693B42BE92C2E375047E9DF8620B624AF8DCF2836FB1BA
801C822472AAF5AAA719038D3B53D0AE481753F2EC689394CFF9A911C42BE535
C5B4A187712D487C63A0C8607D67D1DBD0EE766B526184768A93416366B2CCF6
364F2D24B44021D0935CAEA289B120A613378399B53E2B50C11F67B7DC4BB1E5
861D745B7FA3C7906AD591765884FA7D746A19EF86C30309DE0F43D4747EA290
8E3C68BAF4D5F4C0C4E08DCA301E46AE3A0141A58074BA2EBBAD8B3F326C240E
ABE33FA5AC689444E7E04B78C29E49D3A128567D08E712C5EC42EC1BD3D95E19
5A7337B8AB2AA410EF1C0EB31D5766575340016CE477CBA3478FB68A98362C60
18CDC9BA410A545AB339B2AAA2934222DA734F6A1AED9942B43B18BAF77FB63A
71059FA66EE04B76730B499FA022A52139BEFF9CA6CE3F9855C7706E3F804F6D
D622A6929D049F921079DF979F31828C31A73CA0238C0D2F11BE2FD68F2228EF
BDE9837348C10E9F08477F754F6343A39736386912D6BC865BE30D1862BACA23
0DF2061049CDF9F894D73A549C10E7BE7790043F9A642E4676F9DE2B934A7F8A
7B0917DDF3255E6FE122D88DBD80252D0C1C8047A13F835E3FCFBFC0AA1D92CD
F1CAB8D1C673EBDC5601B84615F513E4D9FE1F8CBF2337C9FFCDDAC85B6922E0
0BCB0DEF0FA647E6828DED2F5B20F227AF3A792C0C63AD888D7AF39B10171FB1
A24840EDC55158FF3D8513C89F666A2DECB4AA4A1D46503919A4CFD911977DAE
4779F23271C23BDF14F4EF8352D9C66A7C24100C28CAD7BCD89E6E344EEE173F
CF8BD462E1C67F06D73A9085A2AD1EA3DFCD19EB5FE217406771B80C8A3EE798
A4CBFAB9AA93672B8FC9D02014F7076FBB477A777867C6A6AF2E6FFE3CBF3917
1E4F68BCED22EC345F87A92480F4568006BAC16A2DAB940CB9F3462D254614B7
78ECD86F7C3B3A7DAF06DA2D790F353D9254133C38D668C38082D0CC1BDC226B
4A7EBB1460735A5CB04BCA4D71995483CDDC9EA7D3E070C00D5EA6DD4AB539E7
E5C8E436656C99F30B3B464E5BA6CF7025E098C1FDED8B76260ACF62D1A08DB1
F126517B05C47376D20C999565399B06CC686A817B226101AEE3644A706F3767
372117607576BC2B9AD2637DD13C76F9CF2A356F1B9101496868EA8875C94C3B
D181936A02D5387D1C3C285F2DBEEA25457F6A74FF7E00449FA41878776C0DF7
C58FE07009574AE6B457F3BDE448E71CD04AC7E3C22E0CC8AF56B8B5611C4014
3CC20A39A5FA3D9F6A5599495BA0457109823CE71BAC2B7057AF826DC623213E
A6738E640DAECF08E69FE365741CFF8858337131B53A0AF9E49C3655F62E367E
DE824A37A5DA853E1DD5970EC07D3594A59DA1AA85D4FFE3E9E7745FA7FC7F2F
AFD4B9405C7907F383A5149D4DEACA083B457151CDCE3BA5F0C350945E8B92A1
635239241B8FAF7704E3013EE5D21F421254F23194B537C36F8B673E70073189
8B2DE6C30159232A2D054AB8254A450759ACE9C0B94DE035D9D6E5024E8AB56B
644A5C3EF00A5B2EAC0F89C5FE8D7DEB9BC817EF1F87C2BBD956AFE4DD4B50C3
A3BA4931A32827E612DC3059E97069D3894234BAC0E9AA1DB7B7EEE7F97C648E
0B7E7012CA4977258733C72CE466A2EBA8F2B391BDB7652BC07C2343FC8A4B5F
7C6B926D1B751BFFC6FCFDFAB9CBFF6D630CFC8BF374DF4DFB4B0845237E1E0A
E2D044324B4F05C8C96970451C9348E8AA6F1153EAC8BA1C57FFA09B3A181CF1
3EACE89F204BDBA7884FF6F90D1D0CB578DE1CDE56F526AB11F9DEC4FC09642C
A68C8F1DD2EFC7BB301279F474967B1B10DD7FBA6B09B95E7B4D34F66CAAE07B
F792BFE7755882FC790961FAD109A7C35258021DE25BB14410828F9122E01428
D72EDC917C835553A30FBCAE5D067266A205DDD3AF3A4734371426968A7BF7C7
9F48A5D91B596D765E15356F388E74D100B2243D230BFB33147BBCB298320930
000670CB15B7EE9C787EC751621851C3BD5EA6E70FDE66C9834189A9B0D796C4
1FA4179D594B7E8A39987A3DB806F337945A02DDD2B33D43F1E39FD20F41CA25
BA3B5ECD3B32F961F4A98BE40604BF61732690F3C8B247C6E381AED4F277788E
223F8EBECE8CBA7F48801118966E39D4EEEE3F04B254A87EB21C2E4B00F15AE6
F1E2E59DA6353A45BD0A5BF4B822D86E0E7237809C1F0129B83BA2DF82D5D54A
522697FD78DC73D8A75DC6BEE09FC523E5DDEA837BEDD90DEFCF214640DFD4E5
477FD73B86A08885AC44CEE72F0E27AA63A901F2DCC7C42EC261EDD9699A278B
507ABA7BE7101057297C6A3D67C37D61CA4015E7A46C30202617F3585D719309
7DFF48AF4FBDFC7DD9F66E9549B8B800DDFB2D8AD69B3C6D2C3410E982559191
93498926825E6A96A2CB12F8FD15F858AA28E4F9A9D1457D7B9AB16D9B9D4D45
8FD6853853DF5851C529D134CBE17C6B99A8286519535CC1368407909A5B3CF3
C75B4F86A40BD2EAB1918F03D93A283EB119A8F63E346E7502F0CFD12369B2B0
09A2AD610FD210E8CBAEF4C0498B0E53BF4EE1A00B0C067C113F88E5E000E6F4
FACE37B09D72B4242CD320E4F72F5E123E5578ACC48F604124A0A45559E1DCD9
B58D9EE14F3BC6B4452B9236F6A3CAD7FB7E7D5C949DF2875CE44537DBA8B1D4
C7ECEB76F55EA06D56209E0BAC984AD37A459B6C45B4D7F8B84CA66BF274F1D8
02BF247751733715BDCAFBD55854B0F436BCC787F66B44784838F56AA29F83B7
7D46F0D88835E45159413BEDFEC525BDEDE44291003D313CD2268E240C2388DC
37380A430557D988332DF505B16CE488AF68C8F8626B7EA790121D6ACB87D94C
83418919E0CAF58E41A3E036DF13D13C6B107500902A747CD7D7BF12235A766C
00539129C31EA3E738733C4E443698673AAF4E9588AFAFBD00577721011A12BA
D556591A82E2739AC4234917DD7A850C05F595BD87E0F7719D42DCBD9D724C85
520006A9069E1CB2557D2F97D7A0C54AB564DC62759F793D60A4760854AFB05B
AE445CB9131D0C14B6A6ADFE12DB225684D8254EFD295E7542031CCADC4B27E4
F579C84F35DC502F17DAD24C1775F15F505888F0C3E0FD42357ED07FB5076E78
E862016F7E5835CD5BAF87CECAC4BC92375B426E9512928E748E0328947B1844
E251F3A6E99BAA5B97045D1ACA798296D0CCEC2044E59F32075BB7CB7C636BDE
755916CB59C802761A99B211EEB550EF9BC14AADC70818D0053993C9F299B3D5
AB1427B463A4D76459385F036A95770A8157D225FB75B2C92CA39D1AE7411AD7
19AB8DEAABDE9A2F7530B474CC7119E4335AE12A9CE84BA7FA92AD46D6A7AD54
A676EF1B2B0F3A73E6FB24B20F9702ED522DB7BC30DD2212ED63C88128ED1FA3
7B05D70B0BD95BC58F1330343EAD91AED48EB4252311A625869776ABF6DF048C
0036BFF3E240900C2AC7BDEF8F3C39AC6E762C47AE55261389AE583C5305D7D0
1E67A7A7D911F8FBA229B8F51E0C46DD7428FC3CA0C1BB2BF891E42C6D4D3640
CA3A1C3666AD6B76118B332B7B3B42882F8547D95025D9B717498EFC65F8B5D3
AA511F10FDDB417565C76A5DD32BBDF25A894308C72F9D2442E783141D4A93F5
1288982E2F047B885B5A2678B9BCC3211699D8AE034EAC20E15E45873E7A546A
2F73B2929BAB28434974E667C1C278B6770910A9224C8A3FCD70ADE5DA68CF31
6CC1D51D1C95DD713AED07B239A2F59307C1F09EC5750232D3C7DE1C77DB0E0A
DF6C0785CC8A2FE6191C6F1946880167D7339454DA620B878E519F45AA07167F
6EADFA880230EA392964DE3E69ACDB3F307D76AD8F32F0C3588253A7FC357C6B
7E235C1F59E38C462FAC781BF0B00EDEEDFD3362C4CEC3928156A4D202E0A6F5
96EB9CBAA052B52A24DF23757776FD36344D1A4CAD87535B87A3EAC0A4666A8C

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSI12
%!PS-AdobeFont-1.0: CMSSI12 003.002
%%Title: CMSSI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI12 known{/CMSSI12 findfont dup/UniqueID known{dup
/UniqueID get 5000811 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI12 def
/FontBBox {-98 -251 1052 758 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI12.) readonly def
/FullName (CMSSI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7E95ED8D41FFF372D1
EFCC695FEB0870563ACC1469F461B830067AEFB9D3626BC50FC5D152627DD21A
FE7500D482699E4CDFE915DAF451B89958FB1E04AB3DA75F4B72ADB7EA4F56E3
BD84FBB595EBBCE0973D99DD706BACF796BF733F74CB170BB8EBF6CC5ECC76D7
0BD990DDAAF38C98BD6EDF67F78CA963CAAF049775E6A52D6ADB1C376B877B3F
2B802A2E47D1AD7A5F539948F721AE3B0434AFB7F3FEC47174D4D5ED6F92FE40
51F4CC3CC6AD4465440B4794D305DEB69B5C11694ADD7C8EA7C1F396AF070B3E
D1EC3850B31149A481F5EB5EA8CEC101B1523231E3D15314CFF216698B8ED4AF
805AD3672FA977CCA41888F13A1A400401989A16DE679AD4137E478918E650B8
3FD650F1B2EE7CAA83C32E7BAFC29BD9795B8E25A1E2BCF53910E4F7F25A39BA
23D7473BFECA0FC0194C0281C96FFE891675AF42D1A7F60B75945B4DD79DCE71
F586799C798987B5F3321F23E1D789415C89048D2B5826725E10B56668F87112
004E6401DDD89B602A895EF03C38DBB7E5E2ABD801A3A9E4D1E606C6E8413D20
0EF4A8D194C9860DB3EB5C4F0CBDEF905288BC6A8FECFF6BC07654CEC026F555
5B5DBE35ACD67211926D81D575423CBC37045ED1E725ACDF605DD9B918311FBE
69F1A49BD362CB9C98298C13C8FF75C5D93DAD9C83AB8861D23E289BE0E51FF0
BBA4F5262F69A7667AB17DCA1749487F6413FA3C49E0C4AEFB078A1526E1990D
BE2E0071CB312E6796242DA231041252EA1FBB4495AFF14B1AB089AA8379FA42
58F38D448DBC27929635CBD7A448AAB11C4476DDFE2E63D7E8340E57543DFAE3
874513597D5EBBF4CDC6F5F29021B7F46AB42A1CCF902C2A02D71D442D44A914
8DFCE168C921A07D23CA0324A6BA5B59F58AAC40DA0DED8880B398C14E80E73A
E303BFE2FEFD87BE62D5A68E0732D48D300B24702D8844A96CF17623BEB19682
4086A03727F9E6E28D1B22A08B1DF87DCB70F728040DF2F0E2B689CC6AFFAA2B
8C791D04BCF6C5DF1251EA41F5A0AF2C2B629F98379F4420E4E28BBAA0EB60F0
7A7135BEB828C3E7D9CEC68B7013ED5002B189BC6893BA85CFA5698230C05515
60D4FAFC15727B19F53154A16BD6BBE9B2DAF3A988C7C46D2B2A1833185FC540
2A84FF2313B5B1F21AFDA946D1A6D33DA5E8D58C8332DF4C1FE3D79C42013114
0DE9FEFD06E18C16C499C59DD5D2EA7DD13A12163D5701A79315A65723A15769
429E9E5899B78022423409B4276424C4B226651DEABB55FD7DB96B6AFC98463E
B5F81D9706D7BE6969F3CEA8F54CF3278714E7D1BC94916CA9DEF322A1B56D16
E16E7F4F3C60B73C41D407D4B581EE0C7A0138B7DFF56B9D0B0D1D525A2CD5C0
A129B0F27FD2662D4514893BF9FE8747726EE8A1A3475C5749EED147C1BAAE62
4726616D4EF0E6BD9224EDB205E58E18094D8D830404CA5398AB0EDF4E618FBF
4E26F1D862D19362EE5F08BCA2B8E85FB30655AB454F5F5748600CAB8BE80461
4A5538301FF79F75D5F75BAA6BBD8F1C0071575A74C7CF14FBC6B9526D6293B6
54C44BA48CF884E28325DBEB7B7587BE85BB7B087EFC05B914756312AB57DEA8
A3A346632CEFC03102324D8B216D9F6744E3CE5CA45EEF216D13D986A57E5966
B4C390D8A6330D914281E6D65D04A713D3E70F5B48C52E13DFEDD0D4D06D608C
F097124EF18F99758FC817D7901EA23DB61141745D2CFE4993BC8B820E0F8FD7
4E6E140D5A0F56C2A01D8428AF52CDC6FDF737FF6CDF1820FBD417CE907B59C2
2B291761E4A89CFC4B244E8A2F6C15A1AF3842F3F61788BA045B80000687AE80
13F3921569488B36BD88D5AF1A050C4392149BD2CC64CA700B3826A1F16078B5
A78C246B3A00850997C88F8D4FB63EF43F752BBAB6DD4D5D8555F963133F68C5
1C8E79E8E385284282BCECFE99B7EA59067B624D610D7ED7C25792FB4AB61949
DF0721D6208329C25E726BBDE4B9F11AA4FDFDAEDE92864BF7E09BE4BA93C539
EAC7882536865D66B217B2556E271FCF19F29C297165D753415276D923ED1F65
E4027485C64C2DA034288D94874CFE8704C9CBD804B995473C63529671D1F885
F2238E3C48A34ADB5FEA4B3DE53E546CA4BBD5618216CFBE90C3E72CAC116702
AD9B0D6F703A49D6811388BC73231B338EB611803F205419A6976218EFE91EC9
1D27EBC5CF39D77BE03F306887BBCB1E2015FA7CD0B10BC31ED44CB3DED67949
32EF94EDD91C633BEE219465C9C2B20C7001B06517D00F1BE42A9DBFD414884A
FC6C3E38BF08E5C6059FE62E9A63DB2BE9E82DCE77BA889E6B63590AA7CE9F32
65675EA7014BEA88B6D6EC8EA31CA18834EE7176C821978EFBB88165C02F40B6
0290AD1E07787AB681B168D57EDC92CE019C0CF36E5412898CD150A469DEACB9
F0C7247A1C1A30A77CF579EFAD2E08A2839966C8C490C0BB88DB07A41BAE1F6D
2F7BD3E126C3A5DF27E8FC09ED6C84E5820D91D52CE714423101E0716AAC762C
58A4F4C1025FDC250183BB664F0C8FD85B92B55F57545493C1488E922ED93EEA
65C0B198075C6AD52DEF321CDF859419A567963840B1DF0C840088F8D50391D3
41100CD71F7D5724046C679CB84B954255E784FC56270534A75FA94AB6485C11
38AB63FD71CBC9F63E3FEE5A28D5B2ABEBD7FD95F27877F7107E037D575BA902
CB180F92BAC8AEE397C01B3F8AA3E098F322ADD4B02895B8F12341D5BF94F672
805C550AF837C437B545578178160909793688B15A8E7E7F7DA367FE37DC7D1F
EA0ADB822931BEED414243316498FAE0C3415CC5C385ED6DC9F9552FCDA3248B
C62648BE25EB85781B426E358CE8021EE3194055A3C2A2EE94EF97265AC32D92
A29CB02FE1564489C22A7E3B1456CCCB9E1E67D09C181E66C473770A1562D9C6
A51E988D0AC2244137057E5F6AD9D6E2748E9D0909E729EE3F0B05B2B553C1C3
5DE87B8B77609DA1CC40EA55AD255C52EF15F05098654F804460C54A4D8F5DD0
84EB360359633CDB4C29A07E9C7488A22CCCC5ED5B5F9F5F4D3682E9F8DB8EBE
628CDCB052BDF07CFEECAF41169895AFDD1D55D34F2387D184E5B21FC9DB6D67
301033E14B204A35D30C77F257F725E2DCA09347984C1B3D0D114A810BDE4E58
E310A71854FBE42D3197F01BD5AEAEC19FC65BC47B6F3402D1F17CB5C9DD3E8B
905A51809837430BB0DDD992CB7972A7A4B2F564FD6AB60180B95ABF33E471A9
3FD91CC1C4F0EF753D51B5E58CBB7CF76737E55515E4A63ACFF8CAFE617BCEC7
C15326BA32AB690FDB0CDB73B0B8CD85EDFFBD9AD05A51DDB429F19BC8C1636F
86549AC7276A8BA3B62953C853C73BC5A0BC8E5EF9A9D5695E9022FB66234E52
DE8BAA65207E2A3E2E399A921CBE3D2E27E5908A0A9434B9B53BC74944F83F9A
ED8E7EE9D13C579C7426A5E6B116CFDA609507AC072A51CFCED1CC1DEA830BD8
E91DD6839074612C5B7D6C23E6EAB75B0B8935A73F6028DC5CD71C00E673CC6E
5855C864AD952AEE356688B33D1A511067E8F6320283E6E13C2B441962EEC045
8A39C43C1695BD66C68198972C02EAF0CAA52939AF3E3540EC322181BFF47A76
145643D0291225237E7CB2BAEB44703A6D5413CEA8DDBEA85FEDB9023AE24AB8
9A9D384692E055144B7B30995FF70B7C34E0499CC42D1D6A8F834956B9DCA093
47EF42B8BFC4F8937592F2046C0B51D18087BE68D326CD7C0108F403DE194E22
7FAD7328DDB2A765AC964DAAD607665F16F16141BFEA920161A44A37BAC39380
545BEE46CB259D071A2EEAA29DDE83E5AB26F2BC66D54377C2C68D138BF63C0B
189250C157B939A02802904EAD7AF888D7A2AE54941E42DDED279C9A18C135FD
B333CF0FB0B2F48EABCC25B1BC9E483034B86C3DF159737C85B888FEEC0EF967
35C4CF510FEFE395D9B256F878FF594F794EACB8C1B2970F4521129F123A2EBB
D60F4F2141D6AA5C9A9B7A53ADBB8B5C5D439B3D33153EBCC6D4B3F59A5AFE52
8373BFB333B724D695309176562E38A0BED6302E21ECB45C85EC883E76387FF6
85C9F20C75A86DFCF321F1545DBB1666B9B74BB60158F6652A7416DD76ED6A75
15C485ED666EF77330F2C0880AD8A3BB238BCA870AF404545B54FC05C67CAD6B
5EFB587B45E9E2564D227AF0D5C1E94A29DBB6353927F1F553E065D83D25DD48
3BAB91E25A27FC22E82C197795ECB3D93DC96F223FE59D2C400E150E4D605995
3F5AC1E763C1316B71D5B48B8A791B43AB89895DC911D205E3EC0A84A03628CF
E7CC7F00F180C1DC1DC4ECA100ACC81DD97CFD7D0A75A0C781592C6E51C6D584
A1941BBA4CB0912021B49015CB8A5842E6AD887F09F00816648F7827F7EFA19B
FE20FA7B3F2D4C973912AC82C702C08B73DC9609576542B73641D093E0DACF8B
A947CA119473CD9948864F07A0E7C80C76F80766B5B8CDA75CF1DF3CFA73EB88
3EA54B4605A34D066C7796B4701E7907304DCBB941BD35BF980DF86CA0C0628F
076734A7A133E8AE2A07DC89CBA4B67730CDD57DC24C2C9BC3AF6BB9B5CCC098
21040F57D6834EDE5C04D5788CEAF71C3760CAC445446FCD4FE07CC768A6EB76
DEF0548F1E603AA7631BF7708B671A88EF220C0B283757AF6FFF754164F04E71
01B856A21E1C5D2E5440CB30170D2FD09886D8CB566E38C7CA2B39C9244104CD
9D3E94369DFDDAE585214302ECE210EA78FFDAA3877653F43BC0E7C6E433FE44
594DBCECF3331DD8E5AB3EC66BE644EE80DA20E19EFD9AE0BBDFBD510150F16E
F07B3AA62B206AE2DCDF131084E7E7A00CF66D84D3DD9EEEC15C4D034385BD8D
D00AA5B0AE6E1E5C24B98A992987F7916FA732AF40D2917CB7F284FB3DF31105
F3CE5F6BECC6B8E5BB4F2E300ACE4FD007DEB3A6711D7FA8E61983D21C5CB4D5
60672CFE543990914E10FD3008798754E8C32D46B5C3BD572CD7C40ECC073F17
D1288C036104BB445F2F39AD10036D77E762B3807EAE73F0F6FA5936BEC54CAB
5774D30C5DC1927A45F30682BB9D32D6F8E7A5E05CDD38A5BD766A4B1C9A7589
6A43E8832F9D2F2EC9FC31DF23F989277A9AC66E073B9563B5B66AFFF0D0AE27
BF0F6F6EB3128ECB445B13EFFF7D445C77F1B031E017FAFBB535EA94C684C7F3
58257B4C4E3D9193D18EDB4076EB2FAB1DCB7C9F649C46C38D3CEC441EE7C206
AB0634159FA26CA885BEAD46F18781FBF011DFF2204A6C3676CA26D6462CA2C6
043E90AEDED0F83E8ECC6DCEA3635E66FB4E314D6EA95962A28B091AE183471D
08879AAE8286DAA315B83E15225507A7FA41D25DD405F45E2FCD19EF7CF19D0D
4147DF9EE852F0B0D837B24563C5D04603248ED3D56285E617B97B647D47801E
BE611CC6640DD5950CB32F76C52785E959287361770802FD34FAC52FB7C39C7B
F7FBB5DE6537B4807DBEF20A0F9B97143E207E386BEF04C6D9E35B5B8AA7316D
6D3FF54E0526679D71EB283B461E304FFE086273E492ACD8BA96A1A133E6C979
F807B42D6A807689FA1B75567C4DF1CBCA01DDEC48B3A0B91BB9E6573EB6DFBD
59D9164A990194602210A85D870307E8C84BCCBCFF18BFFFAA99752F740EB62B
2525F82F6DAB1229C1841C7084AEB801C9B7E4FBF00CC0D334694B7F00AF455E
B10B652BC1FB8D8B486C87062EF8B4CD5FE79760EE6C198141D23F6EB0EE0DA8
E851E343B37156FAB0938597E82DC4D40E3D64123366346B5E522712E3524B9D
481A7C49BF4DAB8AB3D96AA47540775BE10163B38F773552EBD4A95B79EF908A
AAC9904556615EBC45DBAFD6497CCDC727DC2630D87CA25E3F283645DB1B3B95
648370051155DFD61C59AF5108E3462382E1A1916016171BAF28A62E2C66BF9A
42C98A065783104DF74D05B2235DDBA7864964D64F8CEDDBB2621A6C9BC6C1B6
7EA6869BE58C9D4223BBD74C31F3F88ED7F06977EC1F984C75399419B5CCD2B8
9280E4E2ABCDC65DF7FA6B5597B107A7EE9C3C057BD19A8373CC8BCD32D5469C
7CB10BE876C9E8F6DF576E7EF0FE2133099CB3801DE117609BFC9BEFD522CCA2
699DEB28771D29034FFB058F679207E8BB94EF2F90A4E3885AA36000D032141B
F1A31C7C1885A801565003022C1B55CDDC270B2F1276738F5BFCC96ACD109EA1
2635AB6EDFD6BCC3F860C19C09E7E7C4D2D0D3E638A74A29AB8A70A8875EE431
A1FC1BE198E2816A6E03EEF1D07716977AD6FF1B8453CE2146C6A93AF4D3AF65
1C7522A834326938F9646B99606AFD8B97E53F14AEA0960AC374D37A36C6A89D
343CD7847A803432C745D8AA61B93B3C4F2D272BDAC0111C343B03BB65CB196E
19BC55A372962D4CB7238F4759492BB00EB94CA9722BB294976F818BDB87EB2C
C44BFD8532C640634ED0F9910D27B90A737E81F02A52D2E42330D0B1CB3B6D42
FCCAFA6137F7D19535432F79AE64751E16127E82142186F479825ABD4B5A4E58
8BA5B232CA706F9C44FB9E02A120C0FE8D0F6146E9DB52F47DE49E1CCD7B612D
320FCEECB53DB4525BE23DEC8B56EC7B1C9A46493AC428D84E7DB2F3160A5BB7
3E6F7B1D8BC73A81D64D2ED5A2FCB6C786F509A98B160CEFD96D556CB053206C
5FB253FC26BBA408918867E6B081C85DE5F708328AA73799A8321A729FDAB696
B2EF98453C23FD984F915D5BAE7C0290CED6B7311569807F3163505753F748BD
3A2F2B1FB614C1F29F23D71D75CC9D19BFA78274D94894D92CB27732A3F7D01C
CA824526BAEAB13BEBA627A2533F2BAD0D6E3C320B8D6B8997313AA2C81C1B12
CEBEA7733B30949497EE369478326DAB3E761EB0D3376090EA22DA15C4C10494
C94716EEED4898E4D759FA265BE6FB2F5443FAF182A1000581B4EB166CFDA48B
F79F4DAA2B19E0991A67FE98621425B7AC2C56054B241A02EDD5ECD130DE4191
36FDDE7F167073E15C5218E369063239D991DEF9EA103BD9A9424CB7A4A4966E
63B7C579C24E3B5DBF82CD30C6C3F12B12D993E1D267C08A0C5D5A95A546D6E8
1D2BAA5B8E2CFD233B39D7E2B9189525E747349B2A00070D85BDA8D9EFBBDA81
82552EB333C6742AD869ED77D9BFECA65A206738DAD61B544AC96626F7EF76AA
5895387F18055768D2F41C985BFC80D2E9ABF72D44B733DB4EB87981F13BCAE4
D7FDFAC95DCAF497ECAF10AF864E10893DAAF1C74558CC698AE8FB6686E874E3
0F88F0C13901E602E70901C8D23A7A5FDE2C642BD7F4D265D099DFC2177AB468
2FB87E371499F08002A2F0F7778EB7D4A9C6C9A258B1C2D0214CB3F9BE5C176F
5C540002EC2730A3BC3CAC159244BF8FD7EB3BE5D44BE048551C0F87260D2492
0011E18E165BE7059E0039240AE0A31A8D3276DCD39CB681C17FEDC8E60FAC77
59424B91F46BD5FCA54FE536AF8E887EC5B2816AB5711ED9D41FF90534D00C0C
043F2F4278CC7BE356E3F40CBD298DCE0FD520C60658D6A5618259E41F1AC594
4FA8837495F3257B2C212265BAA944D4EE94037B4DD986609AA2D5CA867B5EAD
7543A191BE8F42CDFDD69D4F23668655305DB11112D306401A60C4798BBAC362
04FF84E1B52FFD18EEBF8BBDBF1DAF3ED4A88B51365D0370D03492A63ED0DD2D
C3772B8D6529557BC2CC8FD4283B94EA882FBD2B4E6656AFAA43CFBFCC2FAF39
8970807C466F2D1A2E8D3BBFE53395B1AB307215537479D116F3BB71F5DDB909
BB46D2B103FF247068EF9B1B903FCA48B29A08EF49D8CDE066040E54C27B0A0F
8D3ECD9BE17AC67922EF313CC8431931DA85544C9A64BAE28239DA8BEB1A6A96
C3CED235236682819C35880DE7B1A1FCD2CBDBB0804415B789D97FC89523E53F
BFF392BC728DE3570393FAB9C5CB688C7638BAA63B0039BE04F56506E6ED33BF
AB6D10E6DDCF2B2348D16B6D329ABCADAF9C2C636BD5DB312732EB521E60F84F
EACC76186A42961ED1BD6AE882E8BA6173203FDA4BE19871402B26259EBF6EB8
C6A9FAB83FE1C0ED0CFB17780040EF038E7C2DB2BBADA85FE3A27821C006F5EC
FAD2E7592BAB1F2517C2054C5278B2B715720E0BA853807895EB9DC386D24076
ADACBD18368F1C35B426ABAA91AEDEE3CCF58875C0B51CE20FFA8263D6C31615
E041B50B335770E26C1814D9225068CEB42247FDD73F182E30DF0D063F17687C
67218D76D95362CDBA64BC4B5C85DD1018E7D0B1ABDBDDCC59307DCD4DEB5F6B
52A8270017719BB49054472E438F478766865DBC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS12
%!PS-AdobeFont-1.0: CMSS12 003.002
%%Title: CMSS12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS12 known{/CMSS12 findfont dup/UniqueID known{dup
/UniqueID get 5000804 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS12 def
/FontBBox {-62 -251 978 758 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS12.) readonly def
/FullName (CMSS12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 58 /colon put
dup 67 /C put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C3B9175168F5F1A9
C0DF3159598E2D7266342CEF20B1D7A2FE16E14791B4E287FF321F9B1FFA3BC3
63E7D638862C1C1FB094496395B6EBB00CF22CFC36F7A6BB2F48002F91371910
3547AC863B33E91359F073CFC9B2D475549B52D89F5E3931E2D26A834FB89F85
35B24D1CE098ACA855B0AF248C1E878F3648CA2CFA03712F69DF578ED9C1C8EA
69D46462BCA02370D9A2FD09D7F14FD5FE961EA2094DD46CF91193B32ACF647D
B12977B832AAC3C53F013E784682EB12261ADFEC0872E9CD5923866508337457
7F0CE15A46C9A92F0DAE6EFE3B93DFCEDC0CA1ACE8FC02DC646CD01A01F7DA6D
608F5CE76754CA4A4AB5231D232D50DFE662E538640F30ADFC2BBB3588E8C300
142C0A0008B34677CE1F880293D9800792867FFE1B4FA14EF495824417015378
F78191FF7D7AA7994EF153BAD5F3A07D851131A6998B1895529999F8125CDD7D
86B59EB003502D90EC7BDCE68D373DE9612D22D3B03A8803283D487733F00E00
28C35981040157C74863047AB1775DCD295AC53B633FF93C7256F60DA7F5F567
7AF3482EEF84356410460D34C3CD5EC59C2D878C3A9E48F9FD786A5F9D047357
3E7B22C9647F670ACF812EE3EA6C7620B6D35219200B0CFB45E63B318CCB7FF2
BD2A6372C24011729B9C64DF6EC33A04A4F6F5F981F3847056146AD8560A7EA9
82475197C0B977EEDD88FD8921B65D2C8A23CFB6B36BAC2716CB80063296FD68
5BD495B4F63C787C3201C713016ADADA1E479693C2F427BF0F10BB6AB2F6E1BB
B758CDE41BEA76EBB0636C01692F6DDD77DA1C6F4362F139ADDFF0837C37B00F
FBFEDCDB767A8CABAA776469D9BD6E6D9762ECF34D1C3C275D1D148FEC3D88FE
36EB6C6A620B8E2BA67A0AE80B9715F544D14CF026EF95CB413C0B539C557C55
E7277455B7AC440ED2C77C1B42568D1C5B6D0D2F0B8404EC9AFBE717B4CEC6FE
079CE0BE7030CBFBF8D73E55C766FDBC69D3FE7F4FE9340263AD6F8FBA1147C4
0A97878FD14E3DFCACC3DB0681C548295037E1D768F7EFF9E6084DB71CD4720C
1D75C5B96C38532A3BC26D0928134D100453D84F6241290CBC6CB5075E5F66AA
F03ED8DE63A07BB97330A3B3CB8DAF1E9B32E924F639EBBBC592CA23D5351DA0
032D7BD972EEA75DF2D8E15430511DAA16A7654D9247093183A43E562B99A799
DDD5D1CB197FBF5DB330367A3C52530EA66791325668F653518443D2A9C78E8A
544FC9A34389DED4C616DAFF685A99D29934784297FD22290D57FEA0758C203A
B43CFECC5D2180452F21540BDAF90C304BF1DE08651933B7C10BCA90C8F829CB
8DF6FD10A29FE4EDE6D20852E7E43C0F5D5DDB7AEB1BF29D30CD07BA36A74931
469B2ECE710B676E99271435C01D0BC32B0A72BEC454982BBEC7BCA26396DC3B
2ACA96F836CB6E45AC527C48AF37E1EC4CEB184F7DC0670BE4BF97B56A99D239
5B20763658DB829C336E369A77617A0A34AFD550CE09C91B7CF82B3A5B652D64
C0961DB302FC8E79C00F02695379E94FAF494A8FCADCCF156BECEFB40D3D9415
540A53C6720A67B49BF087BE80C380B95D32277D8A775312160945A2119011DB
FAD703BC869E2861D622507A65719243E283B88D5CB5C3AAAF8FDF0C7C72367C
A325ADD8D891B7EB7FBE1E903C371BEF3836C7AA53E3C3802D9A9EA2797D8E05
2CD51A48E76330D188B409E0A2365916CF833CB86FC4DAEC9B51672DA0C3D789
07CCD0EC3BFF4DCE1A3769E69AD8D597D87917324FC4DA960801350C839C37F8
8D3C8CA488A7D0106E11078AC6D3B694E8A44E5F36E2D7C90685BF19447DC151
4E0252426DD02E7E08501C3EB0D9C864BF32BE2DFB7175D0210BECE87FD50B9D
F0819710B485A3674BE91FFA670166C6938D20E52C66E1190CFAEF126D225205
A728002F9DEDF1DFE02131F245BCD9C2AAA82381AE1577FF689D54388A98EED9
5897DCC7EF560F75C2845FBBF08996A6C4734138E2BB4C565554A02538F32CAC
A0E1BAA22DA9E9CF73EC32E76581309D4659BFDAE4DF5750459F7D9C28BACD23
326299A75134A4EC7FFBC92108DD63AAFBCEB31050DC5657B02A4A9DC8BCEB11
30A800757B3964FBB3B1B354F7AE8FD9F87EFFED5AAABAE605B0662DA3E34E6A
3FF1DFD75D62F061B0E436B14D85E26CE841B868AAE5197FD4BF93C134EE8FD6
6DFC807EB3C63E7E09B5E2AE41DCE803B518626015F56CC3B6BF31461B5CD0FB
5048765834CE4AC08BC587B078EAE39F280591AF10C91113F2F0595F08A7AF0A
6AFED5036805F8569070A02A4E88E810DCCBE7086AB9E774D7757B9140B6A487
05D2652D69F45809242A1841D7B8209B04EE3B98E53BBEC660927D79241B67A1
7561DE46262CD2EA631CC6D586C83C51EFB7AABAB87EFBB4C5DAB2DEAC9603D3
585C41B6EBEC35B1E04FF553CC386174A76FFD4392F500682A350D65766F2A6E
B22B54F7CEDA49B214675AE4661C80763B57BDDFA0DDE948A8907F930F7AF362
01E9C3E09E2AA1FDD6B938E71FCF8BC71F76021275F1E327752BB0792F3A3E82
7C89E1CABAEE06A91E649D6D4264DE433ADEF3A4FDAAF8467F429CC800B0FDCB
B33122260B211EEB89B4A9A0B41EFA9D0E9E3845186C09D81C379334E83F3E38
016EEEFF5AE32BE14C7FBFC371BE767E9F41A4B79532CB791324523B88F9C986
E68478711DC711ED277B25D231047ED775F7F2DF7A1720BE57BC79F4D4B53E25
ED3A78235CECA6593D63C067388DF67367D743C8BCC6BF28A6FFD04F75055CDD
9E643BDB7DB63C41035883C800FE4C90D1D6A5B7022E57D745820555DF933B8B
7352610F757EBDEFF020D89DA275040B9FADDE7544C1FC5A3BE04BFA9174A6B2
C2CE4C529E441CD1C89F3E35AE14599B277882F35DD5D4F734D23503DA669A97
57C456950EFA1EB1B8F0E11D47AB5E3AA5EEB3F4E2532C704A22660A4EF8A6E9
5EE48E35A7DD8E9D6EED1B650739ADDC22422DA7D5F095F4D2EC83307B18E93C
46FA4A7E38EEE0E410CAB30FBF589E9108A2C75ADD6B92634ADA85EB42910E54
556CD86413C0EEEAFAA23ED4313A92D89AA13ED415D3FD0A4C70B506D1EB3945
60DE98A614B9FD5B708F5998D9E9FAEAA2BFCDBC9379A7529393718912646230
1501C1BF3114ABB02AF2EB0F0BA1FFFF101B4F168E6126933CBA71F3A52841EC
19C6319F8ABEC016582DB65B189D69F8B18576DADE57D5007ACD9F48FC6C46B2
E7788082500CD75CCD0FF4F663025051AFFEE5A63BD8428922BA16D33D2DB733
4FC629A418D07EA5AB9E8F2928C2B3CE2E7728425829F059BF4E4D9E44019345
4F93C5C2847AF331E1589A9F6889425C7F81C07B953844C2DE59110D4EF8FB7D
37CAEE30ECEBB89A6D46423D324D261123D8D8E9EC9BB8C5A08E8348504B8553
71ED224595A61A30AE73973C3C0959708B0AA187548FF1DDE756D8CA8E35B409
B56FE1F4DB6497E5D2749177C766A2145A38F89DB483B6A744763D009FE79B7D
F873BE94A07584DADF0BA63361A01C9679110ABCEF756BF7650CDEE1AE068B9C
A35DB06F48A851DD67F8A2641B467D2A7DCE760D2A52A57BB022B6C686B5029D
EA65466EA3887B29E88B221748FDCE289A5D3D1F7D1648EE5275D9D3BEF0F841
815DB5820EDEAB2CF692BB12E0E06CF6E77850D82127BB182CB2B22A712B0A7B
2DADD3ACB6EFE7633BEDEF90DAFCF305E1A662BF4E797C1430173040B91EC63C
54DEA656B6E6C5513590AC60FA6DA144976890940A527A8CC210528E66431438
6D1DB2EB164DFADFDA0DF6792349726002A351CB2333FA0DD7CB17102451C739
9DC8D0F2719303BD23B57150E317E6907925C9052164C182BF22AF1DA3DB68AA
A60DFDA4B48819C41B8F1F63B59CA6A916131EAADDF1C8373AF61EBBF40AE1A3
561A46D7C7C188D792F8CA53A6731E31D6A437E8ED46916D32ADFEC279B3D6F2
C4098D3ADBB17993C5EC68B75686546BDF2197CBDF85F6D98895647EFA676EEE
B4F034F1A5B2E02FB6F500547FD3F619F04EA866305D2E9DB95116EFE6E99BCF
D090D3EB8405B60FA3CE7819BBEE0EC8FDEB0BA89ED4827F0B816850676B1AA6
518D89A2E240F89123B76A2FA4B0785611BCFB3B3D52A065F31486F8A8DFA02F
D4AE04EEDAA7DAD07EB25EC8F6165ADD9BE3C3EECF7A10735E4863BB85855A44
F356085F624F40553AC10E2CCA29EE9682192635061EB159AC4FDE005CA23170
2730408E744F13922FC8F6E50D3581E2128593031F532D4AF9B83949EA999CF8
DC4F827DA0400CC283BB42DD7B5C3FD1BC9B444EF218893BB35FAB0802ACF9F3
86F39BE308A1FE7E192640CDB41A7C2AD6DF62664E0B65D4D51BAF07EEC928F2
83F6AD45AF73FBD55CD6282ECF58BB428E70A614F7C0514D86A8DCD947E71283
D5E389FCB2F945E93F952A0BF65C6F8C4039D418CAB8AC54B1C4EDEECAF9BF88
67C1B8452629A46E151E04E7A2FA928E5639BBBD37697CF484E77FBDF82B435C
98BFAF001AAA118A7EBD5DC32F7B24B4AB1F7E51BFB64B526D9330007B782963
AB27FFEE5F70AAC1FA5442E2D8168C039E01748A039C3A689131FE94F880B68A
77069A844C61A6C98BB1B4F1590EA2716A1B5C396B50A683341F9E170E3094FE
802BB1182BB2F17BC6B948669D3B147FF32AE01CD8F69EEF73D1445381ED2309
A354EB2E29A9010C7B6397255579818A22523FD624EF673B3EEC48AAEF18D74D
DA99B90E05E5431B6B36F777C5D77BE64B1172B484595562D001A18AE3640DFA
405BC69A63460C0C837064459E1D4B7216CAE709E2B418647D60A2FFABAA8790
0FB7C9B846459C1C68F59203875FEF7BDDFC8204D18CD54C272145FE65C966EA
43B87FFF33225E445EDEAB34FE1869428714992B43E324DFACB816DE195E1773
06321365C446DA650A634DFBA56A7F360C6CF0D7AF37EF7FB16C21FD2819940C
461DE8284C44320C48E9837D1E9FF36098B5D244DF3B7CDA03E81647D62B9619
F20255A91926776DE45DFA051C811D22587AA88822BD9DD7518D2AF2B9BA64C4
DA24D03512408EF8550E28293FFCF9AF98F32E57B475724C9C7E723FFD364834
D5DD514065392F9B2AAE36B4BAF5D017F36EA730DA4FA02D2AAA3704C6715919
0BFF56A8F70F73F63AE796DB52FD7F861E9486ED170B5718A96AE2F50C168F81
277899992A9E8E8B2E30A42B4389CD8A5BE57F5C74CBB0963D99A23E8024D640
EE408A699E8E0C9BF7C5A2D72EB716C5EDFFD75798695F26704E9D5CB4F84FE7
D02407ABB81DB79A8DBF52839D28E4C18EA548C1163F8DEF04E5B400E7E4AD0C
B12195B21898D241A158560DB4DE0652FD1C0189220A15F2D3367EA1340CF29B
CF9B3E1191E4A6FEFB3965DFFA22A1278738B1F84CEDCBCB2BD50D2B2EBD78C0
BF95298BB3A67BAFFA78FE0C53D277665EAA3FF29C2DC7DEE1070C71B9D1F1A1
0D8F784CED8C64C9F7F1353625B8A20D9998967044C40ADDEEC59E604DF34B6E
541B242534176E092AFCCE4376235F5078CBFAE6E780242892FA7CD38F05110C
E18D82329631BDD915D67954C5EF38239289D05BCB5447466554809184CDAAF8
72FF8C9858B15EDDE82FBEEBFE4223EB96731EF7E7E03289A818DB17FF0F7055
0881E02DAAFC64C8C2D90A54238F00F4BBF4220435EB9619AA788CC0F45721A6
D659A1D2F0E4D6565DB68B522CB5DF1876D750F62E1724BE71175CD7E34489CE
26B2D193392BEB23D2F7CC570D53AF94E157A9B9980087A36D35F7B644A04E15
992803A2B7A629DBC863D890C85F4520FFCA5B253333E78DE36D8DC1C1559684
96F1B4ABA8729A7C2992B5FAF2DD6AC96B934A7E2933F902535F5EFF762518BE
68D73EC2C947D47C55CEBD77842D472703A519E08A0CDD731179AE74425AF46E
7B1924C3C418A01A584202D71B6971FA8115353B77FBF830EE8F526166204CFC
467B0678093F1C99361A95F76860E5FA170FFE674314C3EF05549E5B37EC7925
A770392344B531E799A4B3FF2F7CDEE784DD83EE019E72B93D1CFC8E0A22AD9C
EF7683BF07123573E2DD156E38DC7C9E7BD934043A78E6BF8B774F2A41734082
47A9C8CBC6B90CC3849160963575DA80ACE6FF24CE7030F2ABE7D154F0136D25
8A7063FEFCA0536DB608D0D60932BFD670CA642FA6FCDEDC699B264729DF1B09
205547869402464424FF3D9DBED6F0E4300E3E7238ACD91DF0E7D75BE26D9633
A318695FE6F38E564A5550B1D88109954AD4C18DFEF5F1247E51EE10CA1D515D
E7498B7813DE16A1F0C0B7EAC9B12867E736CAF5DD4B0F046C037967A52296B5
A617B3D3F9E2A8B4A3055A56A2822269CC563348D2E3917603E98EA9EADCA4CA
3B25AD1C1383ED759EAF4D36CD00A9FBF59CDA77057576C3B17FCA601CD9907B
6FAF24443FE8EB53B6A73FEA434AA8F6EFEAC96EAF36B67537E7C2BB67870C49
A3D4EFECA0491A8317DB36B809899C713F8D5AB2D4E7E1FC61EC80AB862627CB
783D35F2E9F125909D4C0E2E738DAB7740776FD0686F6EBEA3DF9A2B0C51D010
D1EBA517A0E69619BCDBEB06FBABE70082449BA53C10AA86EA4B7CD697309D9B
D10BA8E876680DA091DE9C9D6DCFFE367D80D14DADEFA67B59D7143888AA8C53
1FFCA518BC95086BCDF146209B4861ABB60465A6D6C78BBB404C3E7C1112DCA4
9305087190550CECE3EA832D0712C0CF0B61192675CD247A2B5701A16E75C857
A4C178A22A1D3DBED9B521B404FBAB9B419A719AE42BDC1379FB0CC4BFC871AD
A4F7E7C05DF29A1DCCE36AC9B4BC32B9920AB925EEC4D356F52090CC4A6936FF
4A3748F709B8F5C398ACAE3751FAD82FE555F958CF43B6F73B16AA7D68BA02FE
9DDB752B3ECE4052A653D84AD8BD66E09AC5FADBFA18CE0F2F1DD4189737FD42
1E32B534DC5E3C6862B1D72AA1318BAC7F9DB1895E6E381FBF2670356182800F
375922CB0B2A22617DAA12804F620541DD272F9A6C139843C84A33D9BF2A486B
013E52CB05D9017161827203DBB820DA90D9A8E6851E95719B2D4F1BA81CB12C
E46D15A6BF84F58C48CBEFC4D3E3C5532EE8CDFFF85AD6343D2ACF82C9087ED9
5461F063D846D9B7F9191441037652147A1FB0E5DE51F07980058DF9F5670809
01F3FD83C1A5D27D298B6E57AFBFDA9576EFDF1F95D82E70548C5FB10AF7EA24
863D19438876D55950F9516D7AA746CF61E60CE24E08E6DC996E9F3C45D51959
49F4510CD259F52BB087AE3539D66ADD238985FC4A770E9CE248BDA4FF5FAB5B
B4B336BA1879CAD2EE6D783F3ABE68AE466F1CEA1F103C20FB7C9CD0FBAB2B12
ABFDCA5081BDF6243568FD63D98230C21EA5D82652AA00322178C0B8F3808B87
D38C4E8EC303DD63864D17622873C25435E8396051D09F767EB0D83096C78D90
C44DACFC188EA312D672CB43CC538CB80F4E155643DA96831B0E420FF2F6227E
DB76DF562284CB2141970D34822E321C25140729BEC5D882E212CA38625B8EDD
68B9B6038BFBA2BCACD038FEDCAA58CC5E3B4A60D7970B7920A77815A98DA5BC
23DDB9FAE35B3F807F0E1E1136486D823D64BE32DE4B92F3E228C78B8866192D
F45563086FBBA428BCBB7CDCC3B0DCD52FB71984263646726EA5AB024774E44B
ADF912F9E30F49D3A8FBD63C501BDFA1D33B9063D2971744DA02F4377E10A2DB
1E51E1CEAEAB5EA739A4052DDAA5FF981CD31460E3FA77DE5FE2E1FE1AC7E214
FC46936FBFF87227B9DFF57D3211A340D76D54CD170476B17BCDA45CE4DE64BF
8D3AE8C464A89F33E4D5BEC5838B58331978769574D066CF54ED5E3235C7CF1E
E514D77041F132E00B13A76A105AB3EB6E4FDBD3E17315E1E0A224FADE625694
08F6ED842CA04EF55CDF2CACB2EEA5DABDCB79FF7D9B695DAE2B91950E3C01C8
FEFB74E98F59560B24C1A289E63F303B746FFC0D945FE34FC4F574036E13FC1C
A5D7A7A9D9668145B240A01E890DA50084793E3EF843F8A3D527418B5A66C766
6DED301E6CDAC85AD40E10979FD7473D4B836BE55BACB3C737A5C73C170B6563
DA6A0785D44F8CDA81F01E0CBB7EBEBF9876CFC52EE5362FAE1C93B4ED591198
8ACCD6357281BA2643028A304E0EED19371714455C1951CE56676BAE72E47726
5B81BE7E98AAB27E0C853EBD237F5FDBB582FBE603D54C4AA171C8D6CB46D3A9
04810C8A2370F4DB0B95DE9F7CC68B81716368E01D9130D3010FCB203D50D9D2
8E441EF4079110617913129E86AF607AE1AA2EC54DC6C94D1D7E0D0036E62CD1
CEB6604261D26918283CF4E8D47F4691CA9A909BAB9ABD7D604B4A1F99EDB39D
775454FAE89B3093712DCADC1E3C6C19EB313E708A26F0942B98C5F2A9D9C957
CA6CC096282357F5CFD4CEE03BBE601E79045FD380B0EF416463B5A3F118E90B
180B45D083C2BFA04DAAE903497F9A24D8DAA217B0C0326318C9C41B8DD9D272
90D282DB7D58153C6BEFD99548FE2564912CD8204EDAE3105325627FB7964F85
65A3ECDE8AFC3E50E78497CC40296ACBFADAD33A0ADA22C6863683A6B8FC1BA9
3660051B0E2BA5C155B729EDCF46FF421F69BAC70F4717AD313AA2AA3E27F724
75FF7B1744C10E0FB344B66613741E975A3305FB614DCC6450E4E80CCB43BEE7
FB854BDED980270276AC1F2B2490C02C0D56D605812471E98C38E8422982410B
3D1A025161A1F6AFE3244C8FE3DC7251B063AC3CA9DBE53A80B7B3BA5290B393
72CF3018E51CA705D806D59A7B5FC5F1741A55E3A602447F395E4C25DF7FA754
79D571ED30BD2F482CE7B6438ABAEDA93AA71F836D37F710756B58688EFAAEDB
18FA6D2E842D5F67FFEE7570A61EE1B09B6FA883168B037C31F0AF1C2FD75CF4
69577659F02E8CB867DCF1B70A4D816D9E77085C6FE1DE5596DF27A0D97DF8A8
3F596483ED828BBB046C5066C5765D4AD091453249F7A8728DC59EEBB848C2A1
D1594EC943A4B876F0410AEA016AADF65B9EE4DE1BF8CD878AFFA3F92E8E137D
53DBE4551F52BBC54E358078B34453DD18D68D4B8DC0CB270D686AF9DE0CA24A
56DA1CA78A8AD6C70A483336A98F5FD520B79410C7F8C84AA8616208AC005B46
40050D5ABB7176258A995ACFE55AE2C2AD74F07A8741245441762671C7288C46
2B51DB15F66C617338EB5F698EEA21801E83BDD5B98CAE94B1B654CCC263A2AB
328908D7C006A309FE194F199A472D14751814BB20DD30F4A61119733F6FCA2F
C4FE441A06C7D06FBE0C142C2EB6ABD951C6CDD36FF563001735B7D4D107A46E
D4AC8836554EB6862720C568F6F74C800D60C3CDC5CBDA46D50B2AE20EB0C891
DBC47AA343EEADB871F5838A81F344AE513F7062C5C2C965DA20D4589C02F98B
AEE253785571A611D23FF0FD50577BBAE180E0379E19F333A71119C04E7CCAA0
7270201C3C8AEA4AEB322034A1334C8133E5CE5ADA253385E5E9657254CFBCED
BBCCED124ECB2507FD5CB2EDDCE933CC81BE9E636A745F2025916FBE70978C01
4D517F7CF78F1163A527932EF156AB8AF8262AE4AF803C4D65C0E734428D8292
A34E2C46D140F13AC0BF1D8B938F43974C7A17BDC0BD7CCE6008552C5EA30166
5E875DFE0044D4C4ACE644112CADCDB0A2147A0214D110DF41085411183FA647
F63B6424727827EFC020170FA30E0F86D5496D236CA8AB7F8F56C8B30F2DDCF2
6BCE30DA0EBA5DC2CAEE7148527BD362E2733B950491C9E7D7B08A1EA327F5E4
8E1F445728D9A0FC8A952BAB6C8337F5B9544552CB7D4B35A7C0FD9C38B7C917
1D136F15840E7CDD8CCC2777D5CC84335A776E13709716F7FD814B9C898B2AC8
89351E717AFD79F61C39EBC98ED3BEB509D2C42A98D7A5D99983C268A2447A4A
70FAA77EA477D12880A4D509DB552449AAB268EE2A92F89D56AB16AD04525F32
BC2183B99BB57CF54039492F9DB381FCCB5F6A4D736A44F7A0E55869FFC97DC5
830EEA3886AA91930F20A1275E10BACC25D8F4C7BB81D5E506C3401F547E22FC
5A162CEF613DC1034E4B1BE4D042235AAD0B1984142587B2FFA44D81F023AF6C
E759AD0465D696B894A8CDFD06670B9709A1EA683A835B98A1D4AE5D319F5159
BCB95B8C60C9623979174DE92804BFFDE82AFE78334D3E278D0EBFF48F7B2DFC
A549D73AD0A1B0753C5BCE09654B17C6C237C435DA2CD41FA3779E8F945E08F6
97CF15A37BA72112531068C8E8215A960C1FE162DFD6BF349C53833AB9798DD4
5886B6101EA4B81930DC5C136C0D865FBF2762D8DC5BE95B5FDFF53ABC8D07FA
EE4F24AB5E19BF2B4EA8067AE13B3E16C5CB1A55CC1436979BB00F833F0E54CE
F62E592AA2322ADAC8B122A33253BBDE203553852C64FF3DC0793413558BB32E
1C796CC83BA409D1D840DBF6F8AC408092DC58630999C92E9F97BE5DC255392A
89742025A541E48750421C14FFD19AB55F7E8B101E056F19D8E3F2EA281BC9C7
0F76D10A7C048341D375BF2945B1CB91247A05672BD6636F3E9E9F56C1383B0F
4C21207B8E674C81B09A9C2DFE46C9E72CBE1F57E54682CBAEA3DD5201701131
5836B40605D09EB2714EBB73CB367A9BC38D42DC20F9DC263D3A52121D8E5D5A
AA08899BF61003190CCAAA5178A0604AB3F7C84A234E607EB8BE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS8
%!PS-AdobeFont-1.0: CMSS8 003.002
%%Title: CMSS8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS8 known{/CMSS8 findfont dup/UniqueID known{dup
/UniqueID get 5000801 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS8 def
/FontBBox {-65 -250 1062 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS8.) readonly def
/FullName (CMSS8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 66 /B put
dup 68 /D put
dup 70 /F put
dup 73 /I put
dup 74 /J put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C6258F0D99DCD775
734480114DD0CD2931DC18782C4CCB90B6906CE08BF4CAEC2D4283CD44730A2C
28919598227F98FC5524B0CC92540E349C5B190DF5F2317AE46FFB97221BDFA5
114C21D5E8FB0D1C298EDFF8836AD72A9B2AA132F52DD5D3F30427563C97CC46
D241B7024B4CD9F1E0037FFABCC88D8CCFDF3BC6EED778074F9590733CD147B2
5B68387E0F19E6A81961077BB7640A3C0E27ADD72556CF84ECD981ECCB64184C
EAB8BD9B96A873D80E3E0D5B4F5925983C80EBC3A8A12FBC452582A0B37D3C42
4DFD22E9BADDCD2E69644AA271EECF366D63FCC29522FD72D6C1EFDB3597E866
61443179872395E99024F152F6D6A4FD71BF1C7383BC1CC27AFD2DE3DAEFC06B
6BA837BBEBD0BE09F6AEA31A83B1B45255DFD6FF33362AF8BCABEBB0D944B3FA
B85FFBA0B370B9035460905432EE87395E518B4B670246FAFD535774467C059F
DC30EA01C95EFBA4ABB41711818E23D7E69D32BD63243A6D98666BD46E234155
BD6ABC76F551C31B6CE2E52323A9DAD5C003FB116AC8A82B46ACFC45EECCCAA9
E12C2C8E3CEEFD98D49ECFB824E8677BC9CE9B682BB5A7117174E4B2A0B925EE
553713780CDF3A3A4AF1560343A8A448C0B5DCC4E11EDF5ACBBA0BA8E5B899A3
7321AA7D4B283AC9234978C2DD81813653A96F2BD129FA5F355D56C4E50310D2
0FAA8F304D8BF333F97A6CD20CA4BA7BE6DC1446759683933BB1F1617AEAD131
1C9EF2212EE7EA9B64E5ABFF45E1727EE82C00FD371BE1387987236F9BDBA4ED
A966658ADF028B5DAD1F0878064221D0469BF17CB4E738258FB5D92E9D380C64
16E95BBA6A2BD9EEB1A187A7231C53BD8ABC9BAC46CA4AFA94A4920FA805F67A
A0C61940F6826CC4539A6CD1F9900EDC3F720AE4FA097F1D7510746BCE2E67B6
EA2F2046613785AAB89915655408AC9D03201838BBA44F421D5F25CFD88E56E8
1CA23CBEE9C2E323DF1866D31F309C92281E514A87A9631F33B238AC6520A20A
346DD6A206C3CAF2830FE244F2AC5D894686CAD5F4BD1CC51EC0B547603BFFC4
F008FDAEBC93542A43B7C907CC85046313348CC8A017C585CC370604E40AC820
8B9D8F57A01868FDC93551DE10FA83DDA3E49E44C32118ED90FA67AB1C66B3F9
F80CF71131977ACCF4DB44CF1EC26AB363C5F95FC2523B5DFBF4D60647EB23AC
89CB971DCDAB3BA26846BA9317C051011C37468B21B159412E69DCB84A9F5876
F418908678F38880B95A4BFD3566A6EDE93AE05BBDCB3C4E240A5C0A06301896
69FCCC0B65BB269F2E10609B6446A68E2DECA905FC26D4F502CAF0EE9AB15E60
CF42CEB376D92D80A6AEE55BCAB006999BF4415815D0F5BA3B1FF9D2E60201B5
833FABE8B883847ADACF9B032721DEEE7FEBB583B89066ED9608F1EFBCDD09D4
3F3C2B7B03154676151753DFF53815F2EC1517C094B0D2CC5EC483AA93772D24
AD3B0084537B91BE1913A31C70750C6DD707761DD733F9ECA552D3F26825B2B8
3EA263488892C929DEC07E2F988B7F7657D53CFA5542CE336D35B462E5E8649E
05973AA54C0A4E63552004E3C77E5FA77F821D820B1620CC8CB3EC5B1D7BA751
16CC155DEDD4DB0FFD3009729F365670DF9472435557201D8E82341B4056D2FC
5D2F7C57599249DA2A99A522868716B076320350FA7415C3B10D77A6E1DC77EE
2D929A038DE3EB4735A4D4F5C8C340D6D293D57E83C2F379ED0EEB16AA3A2A2C
ECD664E526D918A3D0A934170B6E1493843E6AAE87E850D70DE65D34AA2A36DE
8687D57A6B6B1447F9A4380CC3D4D11D54CBE762258426C46B8DE6059E6A2F31
E748549310FF4362129080CD98E70817A06422743780B86E11101BED14BB6569
D36903BA8BEBC24A478CD430801082CCF49382D6F04DE270D51CA5BAFEBD0F8D
901CDBCF10DB97E2B059C8CF7CDB45BF931203D5F8CA4622DF19682DE2BA7924
47F78908BDA23C4E21C0ACD2DA259B23648B6F233EEE830E7B82DF4371F55C30
71993EC2BCC7BD6411690B9B1621903F358450976D6B6EC6B505A593A9FB7D92
7223E2424DD5AABEFF254FBCEF934A4D51949BA0E8CD614AAA3AE6C3ED7B37BF
5324BD4998D8D5DA95E4741B753AEE580FB3913770C00277C9F609B4DF3D618F
148E0EC7A75218AD788F98D35989F3DB94413E70955EF586C0995A450BC75820
F5490EB55E5D0D21343565E1FA94FA64A74377F87E55EE0EDDC8F4286951A4EC
ED6FB3B444206D89BA71A9723E41E93A9F6C80240437019F3C23DFC2491A19D5
29762876AC60A14404493D04B5537C1E6FCA67B69DC1CD859F9C956FECF4461E
EC8B6CD5B5A89A8A838660A6C3F47B79ACE3B05C0AA2F17CF2DA947B893B42FF
749E2CD5E7B56823A119629931B1ECF65C51000A10412668877178F589B4DBCD
24D39F9219C46BDDD6F101C6AECFD3876056CBB858FE0C4BA2BD0B5FC26AD5BC
7FA9E295E72BEEEC721300567B6894FC48FFE5E3067C538CBB3B77E386F50D22
F8DCFDD0E335060CDFA49231D157981925F1CB36110809C12BA28D2D116116DE
01898E311FAACEE0E5402CA30B64D3D5A0CA33E417FC322F2F0BB7AD3FEE2039
56A15DD6D1E86971AD3A5A9A27F33AB62A5A3BF5660B59235398926D6BDA33BA
BC43B062EEF199E4ED991518A62AC374EE21E8F1E1C954BA6D1493388F708D0C
961612444BAE019E1DC18BDE900BD7A781835580A74DC696BC512F7BBDBA2D0C
ECE5D83A049F7A3286B94FC446DB5C3F33CA2CD3DDE2D0E774A579831CFDAC37
9612858EA613AE6939CED001EE662DB17642D0357B80BA0F82ED306218DA8505
A613CD622FA998EBCDFB7BC70F4E4C8F1F43241FC22FC5BB208F4B20311A98B2
73F30E4DFCEC93875CBD1ABD29ACF80585F59947F23A96D218C0CB8BDC1C49F5
70DF3D49704CBA9A23294A88A2AD61811450921B1E5C3C86435C55AF87AAF6A3
A13709082DA9C47D372A4226116342DECB14E4A4ADB7598321516DD637B64148
12AB17AC5B2EB25718856D50BFC8D64C78DA6E5C145187DB0325C30A42013A81
590E58E74094610207FC70BBF1A497395939B42A6EFCFABFD9D43221DE484753
DFE5311F1845592B4484B1CDFCC32B4E068B11A82BA189D2268D88FE63B9C6E9
20C9E40B543B5C401265D92A932476DAEADD4D3E2BD6E4DBEC0B30FA90A1924B
41D2EE9D8AF2D8CA79D15518141665B542C696C2507DD2F4D987EE5E22397FA8
FD80743186872DD67BE58103321467CF3F4B8898E66584DBB9688B9C78873CA2
9B72AD7406CDFE8B58FACA2904869FB0EF126DE299CAC08CB89F60561939D75C
2722CA57853372C14F5BCCA5C4FEBCEB0728BF9E30140E6B0D6C034195FCCC89
291CD818CF66757EAEB0AB5A9D5710988EBB052850DDE97BA0DC0B054BDF5172
2002AD6FFA44AA5D9D4EBDB6B2C04E8EF38660D9BC4C995BF37DE078C279328F
4C360B8EB337D798962CACBBDEA517A5EDFAADF0D445FBD1099837F9D689CD2C
E330CF587246387EDDED64A2F4C397C1B2BFC325B39114609EF57DDCD7B93C53
811ADEFA323C59441ABC447F683B5EC43870C057463DD502E9B9DA7084C3BBFB
2FB864D26DF1BA41ACC815F2A71E96D2C6F572E1F7E4A224FE57CD605682F98B
AC7BDE4B85A4C11D58981E981E9FC43B87A368BAEF78AD87B7DA0FE403AABFD1
CF414CBE75C0E9E257DADCBA035E1BF05C4E17FE92309F18633D93DF885956A9
6C27E77540F888B8336B61598CAB04F3B5A1767C1ACFE15D32A25E5B1BF51FFB
CF3CFB25CEE7DC95203CC44805A935D5A9154A89FBD4E465F0E599EED4033365
0A31612F37BDAE8CC85BBC67F7E375EA68C2982FFD89284B027501184C4D2232
CE0FE4E905C4B504EAD009F047FE627C79AF9EEDD65D00A3858F88E699E5EB45
4957086CB22776AD06C317DEA41880D88F0EDCF71B4ED76BEE665B7937D5D0F0
E568C7615025172086BDBD69670EA154CC52C85CBFFE88C1A4D1AFB6624EE667
1B5BE2A31FCE8B2A4B03BC5DC57280199CC0970EBB636DDF8DF54C4A8CC8805C
AD63CE866FB20C64725AE4BC9F0EB275BD83EC89F2F9CE23A084B45694D8C3E9
3F3D3C1A678690877E8B1B77ED85D4F6E03DBF1F3B1D177E330475F172E0E729
63EAD8034E6100B2A5773E2605180629972DE6BAC0A8C2F9580E9F1D2E77791F
E1D33C2DBED3FAC47DDF1B74FD02583C3CFDBB2D1CC2B735C02B14B7AD3733CA
1682944ECFAD673A9AD5E80B6248FBB6E5036EA7FE5CA8C34FBCA6DBD0E76EB6
C2CB89D9815DB3C45742170DA926E03493AD86BB19A1D3FC623BDF1C920684FB
7414EF69CF39713A9495D8CB678BD4592B53C36BC6CF93505B8E32311D42532B
5661051B855F01A9B3D77AE38879853AF0FFE2448368DDFA3EF1DEB88AA055B7
91459586DD2DFEDA192306DF7143F998CC5D67C1CED313430E5CC3F9CE265747
8582102111E7AF9FB94D95B82D8E1DF01F04F2A2C22A20207B59C8976D56833F
E3B79DCB727EE7537476A052E92F7C3D6A625AAED8F026F22AB59EC0F86E541F
BC082D8E35234A18192862EFD232C9950B1FE0BCB91209FB540DC5729B9E36B9
94D0913A8F01FB6CB16DE85E6B89F144111B1D911DC527C24917D909F1CF501C
1AF2923EF71530F21F9BF049A56C7AB3249A420C28954E981EC464F61FA167A5
C6084661808089EE7DBD80A2D92FF4040B37B2D81A2F5A568D461BE1C62B0FD1
BF6D1063D2B5DB9CD48BB2B2AC9CEFA543E0AC5C86C462399C1E82F25A157282
D32D538029ED22CC5935E63FA076BE22D3F53B7D7CCDD344D68B4E73F87A5F2C
691FE68C981FF7CCFB124506FEF93F36F7181075D7BC6FEEC0E35AF57855BAB2
44AF021C7AD8912D884424E8BAEC68A5562B881793A1B47FD338B1EE4C0B8583
2867C78DBC2EFC8BA1431DB1C8622C99BB2C2D4D5475BFCE87B11762427867B5
7253463C6F2E1CF5F1DC1F7851F2EF6A957CAB0C0A55076C59A6FF9237917C08
5F97C2CB4B5CC903B76BE8C057018CD962EF90E1C0CCEECD52F2AE35A94C6EF2
D99DF4DA88247C920623978A1DBB81D8F171B588D617AFA8285F6147E889523F
CF11EF4BE498842D3BF8E811B4B33131416658E03293AD911516D8AED556F7E8
0181391AF36D862F5F8B4588BC99585BFF0F1ADE4BF73320158DBACB2784768D
D9794E2B0F2C0696E5ECE5C7A7DE78EB5CAE85EEA244D43D0280D4C87B6B93F4
803718596FBCDB61A0BFC2DC666128E56F3133B9D4F16305940B50ECF66D80BA
06C0A73C02F689314F1B4FAC22D16BB1E414C6F0A1A548AAB1364D2CD9DDFE5E
C8887964D26BE84986A6B1246BC306E6343CA376F990B77BE8D68A4E54304C3F
250B2311586A1D1EAD2C0221FE1828CE8396DEDEF13E70E0AA75FFB6089DBA9E
9FC3FAB43B3633C8EE7598619A0C6FAE2F25274787348E3660D0EB7212F5CB38
032A41A54FDF14B32E721819AEEC54E8FDE3AB8F0ACEA267B01081F284B008C0
5861CEB5C236729AA17DC78E92FE1EF9F047B53A59F2D1D6A6734D0413D1A51F
75B03234F4775523A55978C73D5BF9031EE8BC6BF9E2637DAC07F5AAF2A6C41F
77620B272300A78E86F71F16EBCE2DBFEF4920BD3F16C282E0BA4C872E5F7E52
7ED2B663FE45D4A36A588D228D32E2861F26AA6FA8DDBC8110F4417D0DF29285
F06B57B1720D0D13828A4DD68D57BD530FEB9C3CF305594B70E4394BD60C82DE
A64EC17661977B18199BA661C48860919CBEB56AB6C32848D51733F1E959EA35
DFFD823D92F11065C643AA69776F71163A60D4941B753BBB4A4C0C47BB1D965D
06C9BA1FDAE47926F37C0C5B591058F68FC1DF3933B2BE014F99A53A617A19CD
8BE011234D48CB7E14D31B02B1FC47C8BFBF04C4409D32CB454E8FA0EF9AF16B
8AFE9FDDC41F6A23D700D4AA922A0316A895D240C5595F21FEBA98FE0E74B762
77FCC80F4950A8C55B4A008FD381E9C0EDF4427CB324BE4ABFC790CEB53E8BBE
AA90163A7BB19E2840FDA404E830F5478DD69B85C5E69573D8CDBBDFF41A8126
24A6AB66333C749C35BE314777CC222D54FF2C4C75717FB938724EEDDFC2EC1A
8DA77B5482E760B68F0A2D240332BD48803004BC157C6E8E192D512CE83D5572
D388BAE80AAF5E7240A73CDA7CFF7F8CDAA4ABE1D3BF6ECC3641B6BD1C2CC703
275D48D62A15E5A85F003E76D1EA7DB65E3476CCCF6B504514AEB1FF1263FDB9
81FBF1A1873FC287FC6B6DB11F0FB463637D4F3280EBD19976588F900B956FB4
36AAA8C1F040300CAB9C4F624B22C1D3D6414B7CAD36B5AEEC90105B5A5C2129
4CD540B9D0129813BE7E20870365F8C46FEC92DDB64D0A6C7C5B9867A4592B7C
124B1B47899CE2D1C03811AD1B8BA253B0D29DAF2B53E312827478DBA274010F
C919D122DF24C1E372F7F3CA77A2C0EDCDB2635F4136EA0C202D4011346902E5
1524609DC031656660302CA36D376245A64135890C13A11C0085861792384787
D0831FA01C11F1E7B4429DDAA0B3A7EC1DC3CFEA24C34DA4BC993300F12A953E
80C8BDA360789FCB0F1AEEA7AAC310D0C3C56F43F7914C3B037DA02C31EB740F
2B1A696E0E5553656942BA567DC9C4D3CA06E45EA615B7B5674016DCFA07C0B4
285BFD9D551117A357F4BEFD58BCE60661187A5FF20D27D685B24BEEF563F0C2
B2CFA2565112F7F49023CDD405AF3E54FF994630BE678B0D6E1CED514FC93F7F
63710D289026CEE4B074253E7E0AB1DCCAB57DA7A1E2050D2B8D3D75F2AD7423
0B0A7081DB1FA44055620B0A2CAA54666C5EEE3C01540D96ACAAE98644E1D210
E0E020214550D723431813C031DC7DF0D177E82AE49798F8E0E5AE0BB8FF664E
4793F857BA380297AFB977065B7500E4C0AA1735AF4E15703C860A016F19E593
319D14C497F24ED8E42F3FFEBE976DF33D697656DC11A8A7C6A60219BF63F186
E0FFE55594B31E5C312DBCCA08E84E94E8BF57CD5F5B70EBE59F0D41DD3F6B05
F7635EA92FA9E082C80075A5A5F684160AADAD501BBFA7746327E3E606D1FAC8
EF7AE7C612371BB52FFF41A97A349D111E861A83C9C48B0145ABC3582FCE43C5
D121F0EB6F5D219E52E2BB660AA1DA5551D6B66A732628D640BF9D8BDE2BB3BA
046FBFE2E28DB31AEA2ED8F9405A39C16C3800E9B5611B460BE0F6716F2BF79C
902AD4FA3B6656E13E9DD7A785C17F28BD4D646D66058721610CD756E0D18D32
F09C740B6023DFAD45A718BBFB2E65544D4754A5DB23CC7988A3EF45CD3786F9
E100D9684549A16BC2DB736D43C293097E082A968C27F0C120C41A53E3464381
F7DCFA8B36344EDA85F53FF65BCDACCDE7EAA41A6D38C1F420F8F2E287AB0F98
A0DF7D8A6CF2E4C78D606569BFB7C51495493FACED57CF2D507DDD366247D807
28D73CBBDE2F4F666099411B1FD2CF7B93D0E9AA161024C58892285BCAA65E55
9FB37468777706D2C57A0DF6D520844B56D62CD10F2D7B02D17F97E4F87C16F3
9BA09013FBD7ED8C2DBBB432288E598241369B9DA6E3EE324290D73BDBFB5448
E9D7142036C0FE538F18E866A50DD23152E2C096E1045E7777888AF5CEFB83B1
C6FCA18A26E83D75AB66291A5A5A285DBB1B9525919564600D71A767BB03A8BC
7BF24CC3B318BBC0F40C79835DE62366A937B938AD46D69C26DD0B38A2B21A60
104698E9BC23BDC80D270FAF3C4DFF677E60CFD7F9AFB62B4BC36E171C079402
E2BD9735E69C47AB8322FB722E8DBA6CDEA87DF40A827AB2618F74F1C441DFC5
171FA17A96860BDD648B85699CC06CC8F3C38638084F8F4F7DA8B4AEEED92199
14290A07373ACE6F9ED34CF5FD1C81292D7ECE91DB3F7B7E87BD9D405F2E29BF
660674457A70FD024FB9194EB0FD85A1955EF983606F5D58FB6BFB03A0FD7DCC
0F4E58304AAC2D9AD27F8A67E78A4A413A276F5D3160BB73DB27646EA4213C00
A70E288F036EA3BD1FB35B49B9AE0C2465A0565E91E89D2FD72C7802C1F4AB38
1D4A8DA1D0AEE7CAD19D325B92D4A4D63EC9131ADB2503521B69B90ECD48D44A
2F6F59FC689CBA73699AD4804910ED7B65C50060C35BB3D5F290842B8E7BD510
8B07EBB6D6360B86CF8F1AC069BB464BF7E0E3A0E93D890FB20B9392171DBF99
64BBEC03013F324BD4B1E3053CE83E81846A8D10F604E10AD60B635D2F72CDB1
2CB6452A09DFFBEC28C5B806FB26A4D719CE45860720A460439778C7E91CCCBF
2EB3D30840902C82CCDFBA875E7365342C32DAE19CD9401354E70E1ED37284DD
D65E8228ED40102ED21D6CF5DC1E2B1CED709AE1E22A29B33C161F79A451B7BF
BF7873A4357DEAD5D4FBB9E952FA3DF6FA9953F23A03DC8782C29EDAB5FA480F
F4F004F60621972E19F06616B84A0F73B6AFF593D3F0E6EE3198B3324C33F379
B7B731459C34EB670BA839431CA419D9DB33032C1FE6C3F47D2243E139F928AC
CF65A4CAD66ADA3D6234B1CACF82F2BB353799ED4B899A4A5EBC447A5688B02E
ADC60BB6225D9C623F44B4FA100869A881A67C85A1B1C0F6249890B4B2907A75
2DF069F62E0E7AEB269F99118ACB99683FA5AD2990128729C8035619B7B7B674
B55698D136F63AA529AFC01CF700FDE5431BF8D422BD6ABCEBF6774E6AF50142
30F6ABB6C6105549215E648C1AE99FA506F8812F8DA273AD3E8397C2131447AB
8581785B2D7DF278FC8BF0763312BD0F432C9C5DA01E0821D0904AE2587F555D
1AB4960FD11026841051829CF1498246FA9D48FBFFD08D6EEE511573421B1054
45F17F1237DBE1147FEB02AD668F066D82A9B81B865CDAC684F130769D75D619
CF59EC213682E904A8C5D39F09EAB03B43AB5CCB6E35FF229D45935F88D12D33
DBA0C4BE269C040813F7D1A90725CB4009CBBAB254B6626D115FFC13F7CD90E6
A9A292E6853C329A0156DDC852E6BA8160DABC41DA079D1A674C335AC831E2B3
F2C1CB18423E763FF5E46A7D7732C230A9C1A8A169E9176E592D6D1D1CFE8673
02718824E0D27DC94BF040A7103B4C84B7EA5AE925FE395927774CF566776B2E
8F236148164E20DE30F6F9CA567D775A8F46C455F5DB7B7C65740A54AF364036
165E8F006499565DC22D9FB4298CD73539DF14720781232D7BDA74BD081CEB17
0BD4E5F8FEEB446FE889E03A64D98C9029B9168096041E96A31CABD2E410C5D3
8ECC6255499FB377CFF850ACA2EA80D17391B3EA5A6CBDF0315A8880A04522EA
3412C3CC9AD287E77F7772E3D15C36C1E2B1EE300EE3487EDE0A148F2DC523A1
14EE857C824DD82D506671E74D41AE79045D77EDD6189B363D2F0B75FF184872
79716FD3F3614B3B8624B6A502D3E33E8B26182D7C21DA24F650FC9FE9B26706
E1997585B20E0B33202681C247FA90E4CB8CB03F5C3D04B81D66B8DDF747090D
F3B2B758823B8ED48074809DC7AF1C30F47E22CEF07918DB062B540FD96A4F20
1D91D1C8EFFB70D05D3E6E0192C3FF09C7692FD9A0CF4C5B649723302DED9D61
A9C32FBFA66C15F1F47133D1239E8E822B7B104934CCF87F03CCFFEF58801395
4FBFF3153AD9A23BFDCD86CA1EE6A766101ED3E3D8FB992F104E38B0D3970649
C8354467E2232E0A12AE565FEFC4C9507B2F74B22D6CC8CD30DB10908E8AE8B2
EF2E3952302B4D9820F0A8FD4C90CC941DD806CAFC632F51C9AAB034399ED7FB
1BF5860A15A04D07B004CE638C5F301424F1D8B84BA16EAA5D641E1D54C21144
E3574FA679633FE0492CFFA731D06740BF8D16F533A9D8574A9C204D06CED733
274953B5C93CF43188B0FB587E144E570CCA5173BA9D61A6EDD2C3832B6F27C8
226FD0FB2BEC65DD0C58F39B523D941629B2AB78B7A50B0F9622794FD285C70A
C5ED81A876B57686EB90A5A1EA94A8679B6F0EAF13CE98C949819E76F41C42BC
5DEB64583C08544A8F23CC9807114328A4B90D93FA21ECAAEB23061EC80F903D
D690974C0E004BC699114C3EB20B9FF1E54FB14462420D2257E50BB65E1A0625
6190A64181BE2D47EE3B934EDBA36EEBFAE7518808F869664ADAD74179EA6424
F3C54B889982BF9FE67C5DFB59CD7BD8A11A4E582F031FEFAF701C3C92F98B37
0007AF3DEB4CD2B25593C8528333AADCCE8C4E8FFFF6328604FA15357F23E1E9
249C8DD9BED48D3E7159D9A641BEDF196C16595542D84F6AE9B2EC968AD5EC4E
3EACCBF6CB324EF45330B5A1FC9D678CC08E03E26362E8EBD3B48DE12B35AD46
03E6BF7C54E966FEEA925948827865E77F855892808C8C907D73F35BBB97E676
D6C486751550CC13B3B6610880DEBEF6922425F723FE86FBCB76CD99CFF511B9
B84CBBD081A954D17114B11099C253F554737C1F686A7CE7FA64394009EA1F9A
EFF0FA8942D1BE2DB1984A2D58C17013E52682B7BF8005704A67256C14E23D96
DF39C6DF501AA381111784CDDD1A7F6BB3BBEDEA505F711B9DB082E7AF72EED8
45534FC553B97BE93FAD827CE8BBF6E013CFB4123AE8A1779DBC3A4A5914E16F
9C418D5D90283C0F52A4DB7D1BE1D087A8F619464D612850F0E07AE8D4F1A8D1
7B37FB265F3084A1956F704424B9088DE1DE671C7A05CED695033698A3C2D84E
9119335E86C229D00552335396F7CD45F291F49D846A8E4E526F69CA58DB79B5
8EB86A51EE1FA1D93BF16E254B0F1FB64B97A7B0F51FF928053AD667C4B55401
EFD8DD644522D068D64C543612D53C50983F844E9EC9E874587CB5E8AD68B00E
6B86ABEF80DED110C77DBDBCC937322919F8D566D3CB4D28BAE434E0FCCBCC39
9C7D625F45E047C530095FE05AABFF498C7C7DDAC8CCAA008959AF78C1AF73AB
7B436C3118AA66FD038A2E156858257D2226E92B0F68D9EC59F1058DC7857603
BC9D9A125AC52BB1B0542FCD99E97B2D87EF789423A894CD0CAC3B516D85B0E2
38C0978DE951FE732F71FC9AFB7A7A3B33E3B7013F1B53F17A08CA778D46A21F
A4A996CB50A0BEFBD040109F30D82B80CE7BB8E5682658AC6FD662BCF09F397E
2882DDB4D4A1E942296C586676A641A06CF8008B87815AD67D410CB0B2D9BA88
EF2106634D87E70C32F53EDF10D130F169D0644694AC889BCD714E386B95032A
D5DA263BDAFC263A9FE0ED80F856819D14FE3ED2226B96AEE39862A9F6F9E318
28772B3E0FA17265D5206EFC62BB20D22AC18A9C1CE2080E445CC9964F831167
7C46D4C7555CF55553D533E3D217F5B6724650FADE6EFB3E30D3CD1E602793B9
50258815EB21C115400E1C456B28EDF66A68DEA59ACF3F0C4CC0579A5307A4FB
27F23575E653BA0FDFF1E76B74CE4E1C302D0F2FCAE932AE8ECBFD06BF232F5E
946272B87662BA362880507ED2E73F0328922E79EE820A9EF5B45CB4C6D0655C
3DE1CB963267984C4D50B269302704B293AB118520A608A9789EBF0BD3EDCDB1
695F2537E04E99445677F747B99B0BB75EB51337852BD99DB3551A07BF8377DC
A50E5B835ABFDCBA965B7B354B48F1D931BC2A366AE406A1E1443B7836C2967C
6ECF89CEE9CED8E91C3F0B98767DED14E381E3F46C425799776E5206AEBA3BAA
8AC4A6E58F7674A308FC31A15F849FA4E56F703E8A98CFAF9AAD48F6D103119C
7177896FA0FAF303E56584E8CFE09D0CAE1D4C1752EA45E4927DED48DB149822
C957E3AE52CE0936A606CF924DA330419DFACD1BC2DF831831F5AD8A823EAE72
54969C1EC639F61C5C663B538878BF69F8D20BF22CD7818E468BF505401E37E8
AC35B4F321EC89395735247CEAD2521A55287E2576102A928F813A0F4252CBFE
9DF7A1CA1556210BED4F36250ADFAEB1DC69448CE95EC4E56BCAB755759E4780
4530917BE43B27058C1597D06EB2B1B2559848CA84C2B35ECCA1BF7570037BC0
94FE4E37F33AA82121377381FF4D41B6FAD3FBE2713E3513367CFE2446593039
27D22CC07E1AE74FAB198F8AE55A45F10538893A9768C3881AB99A5EF78E5A6B
8D3741D443B41D9A46D22B9E62B1FE8441A700237F52FE93835F118286C07904
94BE86BD3BF2E2342F4D57CD868C0965CCFDD7D17AAC5347D8D448356651B17C
26199F2E24D423A5944083E30F224E6CD4E11507B21EE29708FE2C59B8785797
2FB8565C5C3A811A04355113625CC0FC48CE0DF99CB92D97775E4E2C05628B1D
A6181F3D9D8C5B4C93A096E649A4995BE71C1A4C5D0F2F07DB4C25C0D1E1EDD0
B7B398C6D7F1CA1448358B711C64813261AA501737DF7AF771913C9E859AF07D
51500AC9E79AF8BFFE0D41F0505A98F15D8F9BC11675855B70AEA36CC9A3D259
448FB80D506DD26C7250406FCB52888A3E0CA4B4338A716F60BA7AC4EDD2AE13
655E9EE7495E9273FEC42D5D4154F04B62E58361F03F7BF6C6D7AEBFA7CB2C67
0B71BD069EBB69F98C9B2F164C01ED67697AA62772D2BAA05532C7E836AB9734
17F723B305CC9A3B0B457A1961E1DB638FA2F0B0FB74BFA91B768CDBB7EEB575
D0EABD3E77AF06401C037644684A2428EFD892EF75E6FFE401BB7F22AFA7108A
722E68C474274755B093F8F52DC1356E66760ED881E74EA9E1D059724FD39778
39A3AA173E506216ED76891BF143DD0C72210D0C2BF552892F5B822509246883
4DDAEA6C1A96AB51B8F1B5B26CFE704A30947DCBA08AFF63EE821CDD228B7E44
C0329C8A5B9D5F75B3249978AEC5539EC21F9D6424BF2615C9FCFAA207E1909F
6F9D03AF7989C374855CD531F3BAD8F352CAA07902EF5275A56D86D67E18F3C6
E06ED358CD9F32F73E9ADFD4EEC3C03A907EE26388D9AB0142B102C0DF329E0F
5D248B50DE6C9671229336080CE932EFD753EB8DB9B7EF3CAF21520EE502C8AD
8E5D1B428F0698672E24EA9B33D26A2579AB955B8B26E1A84766A7D97CE12CF7
A37B834CF8F7C8ED45D4B1F42E710AA2AB3951AD21B400A0D9EE18698FF92453
182195A959D2BA23370EC7493076A61ED53F7B312FAE9ECF5BD0703624FBB8F4
2D90434A48E356565706D2275DB0B6FB09EE0CFF82DB5326600E3836CEBFA6E6
C4602269B5D45973436AF3187229242A7BBD97CE6F2E8013F3E3B48E821AAA63
8D8A7AEF9EAB2B569EFEC70A32C8108B445565B424888EE65F86C59098044A6F
4CAFF72084BC4E61396E262466FC9FD3ABBC4A6517818B966E02CFFE8DEEE09E
4284809FFA22524FF46A1C69D8668771409348C10C3E9F375350B0EEC753EB84
97BAA96DF4E16FA3A1B0EED2015880E7816630F0B33642A70B4ECB62B064621B
EC01ACC265654FF7C3710994D54E19C770AB62809F57D755448A4DE6F6A268AE
6833244B839FA71A9F1A24E222741DD846D4E8B1A25F05B68F2DAEF4D869FA08
2FC9A32390EA3E78B274428B212CF9C6369C93D416C91397937B08317ADCA9B8
47D99685A9EF41BE9EEDC9A8399269CF0D58E8CB3763C7A9E36DE60819A02B3B
690C991D0A96107E65B7FA89CBD443EC0BEFBDF6545E51C8DE0DBC58BAB46D3A
C645B2DE4CD095EB72F327E03E0A941B38DD5C09FBA3A9F97AD93EF313A76C1E
A832701299B01BA19DB1324CF8B68CF53EE8E41302E5976485B0AC0F2F6DA4CD
2C81CFAC01917047722F62EC63B2120163E1BB181E999A1D34C4B81A5F66FC09
C946C7029A7656FB77AA14BD864E5421D1F5B80CBED35A16AADEF58671A5B203
0E0C738C869C26381AD6FD392B425E299CDD9C44C52FE352AE76C6A9FA40F303
978E7974CCAD5FA2CD9E35985AD9DEE4084AA3C8E8E9B8372725267A99A1B999
47376167CD1AE43E09F78988B122C3E58150CE71E475CF094B567D325334FDBD
866FE580BFF28B62FE469F8CCA884278B91955D5BEB43AB19D7A795E2BE0A79B
6F6DC53E3B03E86D9A35D75937F735FD4AF22A1BAF14567F5C0D2110B94708BE
31CB0A43B1AEBF4030A738C77633D5A057C21087610E5D613EE80D34B3A4F32D
DA19A42D545214A79DF5ABE8A5E2C15017FDB2A21E9CB54D6E762D8F584DBD87
5150EB9A8595E040EA56875506BDAA1B2D24B883FE08BC9E9E281E9118F13E33
05B7909C93B72F5951E6BCF0B4BD644F2DF360501C14D017B8E90E44FA852F66
E1E2044A4CBE318569C2E054FAD54AD4CD01CA355DE9DEBDE8463A3A12AA17DC
612FAB482D9EE1B8091E657252A9A402B8CF78457818EACB7D9FFE4842A4CC24
99293F4FF776381C9CF1BF2506EB8DE7332B8B1A3FF67F1694AD488E8D4CEE57
96479E0E3C684293599B995B57AAC84FD863BC04C117438B95C06A98748C76EB
B71CC70A75508D976979EAC94B06E81603260D450292F81DC7E1471A7D28B6C8
E3C0C8C59F5F343D46D6D34C62754310CCA38A0392BB7540C40D4525F941A339
C42665A3D9B1A2060434066EC6FB09769D43062AF618CC1456F9D48029569C65
CD043E412813A0EC5EDFEC2C662E0F626F85F246F29B913F356D24AE22CF4F86
989DADCF6405DDB97A38EB54A421221261458867869000441F2A7006D7900A40
150CAE2716D7859793379AACE01DF876DEC5507E94FC5FB2D745BCB2040E4809
5FD5C0F11B0E373CC53185AC2563353AA27EEEA5AE2604AA1F68FFBD61B990E4
DA3F7CEA3ED631C1BF5B6FB1A4F037587BEEC9657E17C148551C1E95EDE7CE96
3BC45C04BF04A734E6EC1A786EC6919BD46E3083E62FE6D27CDC50668687C55A
B27FB2C499488D290A15ADB0AB91B815B9B599D2E95F972947A82D836ED212D5
56FE6A0D4D81923061519967C49407FF5E0DC5B0A653666ED1FE7E5118F5A867
A0CE29D74262049405D73E67E512BE49BAEE86106AF8608C8FEFF72B057C339B
C1F4B18098364A9958840765DD83898D97A713A2F45627066FF35CAAE3EB5AA0
038344AAAAAAA337A06F564C5E9AE1B9E7661019233AE2D7BAB34668B61D026F
A0E7F62EBE08BB1A8BF44A4B2420EB90D5FDA0F8432E649B9ED21FF01A01D3CF
D759B1B9D101F95671D351B706B85C76150050A650047C35A94D2D8F9B2B2C83
D0609291779DDFB2247F6ECA6A4EFFFDD97D2DF2299C0EE7DD69D529D7699339
E66317D0CE78577E6646296EC0DFD3A9F7479341F5C5DE92AA62952EA08AAF03
08419EF081666CECC2220D4D0E14199BBCB2DECBD35D2DC82A9052066C7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS17
%!PS-AdobeFont-1.0: CMSS17 003.002
%%Title: CMSS17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS17 known{/CMSS17 findfont dup/UniqueID known{dup
/UniqueID get 5000805 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS17 def
/FontBBox {-58 -250 939 758 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS17.) readonly def
/FullName (CMSS17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 73 /I put
dup 80 /P put
dup 84 /T put
dup 89 /Y put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C2EB4E1CBCDD815D
CC955741BE4EB831B7D7CB85C1D25407B201CC17545B780E8D6352A0A0D4A6E5
DE796F2FF417A3620BBC6DF08ECB46DB523766DBB51CA9D2C9F1E3DE8F108320
3578BBCC8247BD059AE9C9B56528BCE58E4D4B58DB41F665824B4BC63129069F
691248167A4342A569F3541DE83830482FD25BD376A02F5FC2A38F6551647C21
90EFF59745ABD56F742D164BA3AFD6781DCCEC7C91172FC9129169EBC8E008B6
E9240BB7389B3A8583EEDA3B25E7D8FED9037741385EFCFBA4EFE33C68593D7B
5A400D9B7B37959DF426C5030EF2FD6CBCC796894C49162DDF304979DE20CEAD
29990FFBF811A278D938290B562D19AFD4F86E4032BEE83E0D19C6694D12741B
FECC3825C65612357A34E4B9C1339A5CED9CD21F1A6E79430E9D10FC9689738A
0C008E526EBCDFC0C2A836CB7D28A1256B7E0B7A148DC21440DFD5A0BB1BCA05
D18F7D7DFFFF9B49747DC555C38592857F4EB49D1420F99BD1017D26B24FFE93
A7C50EF56178BF4F2DC5B7E62030734F548D4B4C6C62C1129E94771CC9853EE6
DBA76A0FB60B083D3FC665F84B168BE5888E6CC8AC48BA19647D548B1B516947
A199D504BD2C61D447C547E128189326D6C6CA6C9725DEA862DDCABF8626AB10
C0A635128ECEC12F6AC471CDA0C87F3A7EBD5EDAAE562FE8DB6D7C22E678C409
BEFE7F927BD2FBD1C5E288FF5CF3492DFE9A73F16FA9ACB2CCEE08E184AEECC4
EE452CBCBE0D356FA042BDFB969E8182ABB6CFB9842588F73FDE1F7A3542E6F5
34968612FB1AB95CF7084025EAC7B7AB46D47CBCCDD2E631C8F28887FB3B9D30
874E4B8ACDB503E1E824A3DA893C4178679ED7CB36634D07B43E4BCEA0C7C06D
F61BBAB43C60F457395195C2D83C6BCFFE9BDDD4153CE84FE900CB9F55D89A01
934A6FFCD3EE6A4C496CD353C784B8C77A01C95548CF92E76014218E458A540A
FDA4B68864B432CE0C9A2CDAA92BC9473944D8786A6E85901EB0419128EEF276
392CE1FB154F47A6D057CD58FEADFCD019B917E22798AFA2F5FD1568C0254A67
BE716C52D54E103B89DA8E5A2F9B17B708B9471367389746964D86FB890E50A3
67C81F07056A1689491528262AE3B3F7725D77CBC084EABE96E43EB237881257
D8FB61E2F17BB5D30D234DB0CFE5D7955CB336075637B1081FE13B32A06117D4
1D96577EFC5572A3047CFD8A1CB4689C4A744EAFCB256F20429782438172A5FB
86FDDD4A61EC7616CACB8017950D0391C981F88125CD7EE8FC75197D61CA8448
9538607EB5B2A64363833C7B0075B80BD879BDCF50DFC025F9716AEF9F792D26
6FA2593D99FE7CBBC69BE81D60CF58A584E5BA86862637A8BB28425C7F228B9A
46BB6C38541E5722622DA81C197F1431FEAEE4FB7AF93F897CD218015D3D5A08
A193F4344C8FA0F994282B8EBA1D5F05522D7747A5B9F897A3493D6CB5EB3B13
47271ED7A157987928E8F7E29776763FEF469BFF6702DF45D892BC72D304AD65
38007EC5F091CAF340BBFC7704A3F96EC3219FB182C20D1740B080BD42DFCB86
22154F49CA31DB9419862FC830C3C87E09304FFA9BE8060515FC9E2DB8751FB5
5B97F9AABBABAFBAEC512E399E736DDD7C393291A0C65F9B73E2AC7403D96950
027B4B90A624721557376F0AD1DE5474F6A1824CC9BDBB367E16C7309209BDF9
A52697F8EB247D5D25F9E83DE42FE4BFC1264886E4B30C1FABD320F004538870
03FE50D0B8955EA3B9315B95707653DEC919461BB5AC20EB026E23A70B3058A4
52A17BCB9D119A579326DFBAB6C5E9C3585FD9FA85FE607AF347D4E5BBDEF98C
0F60C44F818CCA60892D28FBA6B6CFA838FFEB9E93D8759609D66EABA8CF0B2E
1B78CB1231AE71F1A47763695F90404EFFA3B4F8C913A941BCEF5E3264DDE043
B1BDB637E9299499936DF695011C5B5F24A153243DAE1E4CE83D2D237E99EA61
1CCC9FFFBCDA9456E0637BC64E81003B685385F2ECC5002A99D59C359D435311
28C4AFB62451B80B188ABEBFD3BF8D61C0A8A9DA88388C6E07E97A4458C8EC9B
BF58F3721CC48847D0E504686E5858BE8DDD2534CED6101983200671E7660A6B
3CBBFA13A92F5AFB750D754EC7A9DE5FFD41BD935961ABF2CDADD7BA8DD92C49
778A00A84DD6E2EBDEEAE64ECA07B5FDF9CC56E0FBD88A1CBD8289B5A9A680A3
F1E61B3615BDD18DE70BECD736CD7772E4FB31EC46B6A043780DC1293E1FA05F
D9F0EF4025BAD2094D6F75E86031392751756161FF1F6B6543F5A83DF2B55ED7
C78E0B7A30D486A900E3ED261FCAFFF3897633DF567085AE9C86FCB3F88B1F75
B927D6F210F88851CF19E96195BDB199847FA753710920E53A289C0A5235B771
13B074D6972D62AC61168AB6C57FB8AAA99CC2B3F9F0667DB015BD2482731430
4B9C57629C77A4A716E738B72C10C987F43C0A3D0A1D62361F96D3B56EAB88E0
2AE551D8F881EED75776A223EB6E3397E2B03961DE20B08C6872ECBCA4BE349C
197F7422FDA8C7A757D03F83271404BBE2933B826FC876E0DA0DD441DBB78CA3
12CE38DF095F7221BD6A0168662F9978BE3A7225322C69CBB50A2C6346AD0A5D
6BC75288A292687793055A0F8CE069F3AC8CC66EECA40EFC641238ABDE31B760
739D5546F3BC2A28239E2AB0B99AAA7531017C5A090C778A0DE6C6D3851A6C97
C2A626B38CE1DD78DC6DE61145864F947AA1345ED44DA48ADB134A5659CE73DE
8F52B4510C01BB6E712592C1EF58B923804CABA83C9FE53E5A855D3572797B23
49B65A59118C7EB3C4CED4C474BCBE0D13ACFBED15F1CD0C5D5A949D4BA91622
D6960A4482B834D097FBFEBB2D8CDD5A9795D1B1EEE03265D2B827F2B090D3C6
58B5C6B8533402F94667DC4F6AFF5A9845CA81CEC15D3A7F1295CC2F1A360F0D
9B74A99C34C8862FB8A29415AE215B134BB8B7F9B8B9D7E382FA9E5F46F8AC9C
337D88F37F412077FE48C1FAEA75B9E8F4E070FFF83110987A4F3723E5CFB28D
F3ED2DC547504B0C19FAF8D7C0855F5811A094D62E1439AF334D258D20101A43
1EBD8CC79A0699D1EF0F685596BD517EC053B5A45AD1B68EBC3128EB85290510
E4C42D3E28ADCF02500868BFE1ECB70005B5B2F470775D4738314F7D68A46869
8164FB3FD9AE36C628E88414EBB076122AE27E86B2A16389A6B9C59C31E30BB5
F83427ADF0ADFA53C1F35A0D91CB8B4F9837ACFE7E3FA5A10A3C986B22F8E154
C1E564A55D3BE44876776128BB73624D0DE091D37630E26DB8B6FDDF8F34D3DC
E3F8D3E7621DF3DA02ACE4EB3CD541E92CB4857A2B50C4DD507B9C0E6A34FA2F
9BF88F99F51ACBFD06FAAE9790CBD9E292D0A60FC59B60E3F176136BC5D3C443
27047DEA707438E5A8FD1944E0774201033725CEE85B7DEBF9B0BFA884846749
F27283F82225CAC1F21867662CB7272827BE5B78E78F7072A21697FA8E5BB7F5
A71926864B3205DAF014C2D3CBC36A645D3DA6D87A4CA12C8262FB9504D9EAC6
27054BA669269E6E932C0DA49E90BC99DE071A44D2C08E6BF0C8CDBFC65A332A
39F7F5ABC6C529FA1747650CFC872DD712FFE2C01E9BEC4DC8FBF59777DB107D
6E38DB0D2DCFBB26FC82CAD69D749429106037CDB5F1069C01BA61E7B34DDDBC
0441794F29D852066DB9EED90476626D184D46219C14BFBE9A99FCFB4A0FF823
60F2D71EBE70855800B7C2EAEF13E8B65A0974ECEC0867FFBBF91C49BDA85FED
B905D70A86EB35485C63A8C5B93E283604A7CDADB00B5C664DD0D1D4D07A4631
F83A2268A584E653C9404EE26754F0B81C14E7AB9AA542C170177D71C2C5AFFB
2252C12FBE5B555113CB30FE7ACC0EA86B4DE18BCF53C9B46F8D87E65E6F32A3
8BBD5E2164D30099BB1450B7C57CE75288080A718962DED791395FDD55C63B7A
977FA56E123F6A2CB842CCF98A0A92FAADD5CD7301AA25F3877B2414BFC326FE
551A0BFF15BAC735B5560F5E7F66B1774408E83A851B310D9471482CBA2C6C0C
ADC2782C6E1428F19F3FDB4F57E592BA7EF985F7BBA1DAB3268CF58EB1914EAF
7333841457BB03E6A68D2A9E76B7B8B8C5228902382531C44E54E5FD541CF2E4
D86589460B916859F1DE87DF4D10FD12AFC57E389C03CABEF44FA9428BB0B333
E258733AF1372855B280FEDF087C633701D8F8EB6A68941E66FCA2FC243827F0
706547483E13E723BFE81EC3D096E32C21D0E7F5A7917D4F34BF582A2B29300C
904AE8F82F4B50D2C3C7F8B9701451A4121725BF2A55CA5DF0584E5BC5A741CC
16F8551F485F2C93E6E169DD83CDE1A2093406710DFAF72B2EB075BB01FE9779
8207D068582F7625ED486812D9FE571FD5F655E9E101E6807D5785DEB574FBBB
F6F3B2902A6A8C508F508B2A9D0E0A17E41F30E526AADD1500786AD789368855
E9B68B5226751576D04E8C9DC41A40260D3639843E057BC1D035F556BB0950F6
3C1AA01861033008F0191394358E73750997842ABAC2CC98E58000FC28322193
25AAFE634348B31B1A13586196167BA1A57D76CBE9BE39A6F15319E055A5ECBC
873B110A80DCE95C57EA9D6DA1683B2CDD0D839EDE32CF28409E5ADDC07933F1
464444ECB94DF8E94085270DF7BF7AEAA1DF4813B665C46730079072DCC1830E
2B53CF271365FD4B6D4C55E592FE3A343CDED5CB792AE970FFF7AAF6DBC95B64
EEC477032FA07F86FF19BDDA23D8B45957462A6B35F7BAF1FD053564DA9A3BAD
9DAFC06C7747916395AC616B6076ED236400EBCC425081A1A96715BBFD3A1E6F
BEBB070EAEDC6D77AF8E73B689333DAD2D825DFC3E41352B5B67416646E324DF
AA81FF48B419E0E130C92735232705F134E8A3F17A51AAE1EE00EBEB72C4FC50
8B930F6DDA0015EE5102DF200D7BD57806CD08119A3977643720680224FDCF12
DA7D0BDEBA050192DB87BDB7644DC3D1DF4CFA7A807B13D7A4E22C05391CB0DD
7AC8CD72A861D4982AEC874AB3F438A954BDDDE5E15174DA05522D69D1D33B63
6CDC647D910D81F24FAE2D98C920325220C303BCC3BA8E7F9880664B29420A8F
85F98C03309FE2A0A652C09AB6AE191A760C4BD18F9B706429D46005CEF0CEA4
4E0E171390B0D99D02C3A54A36E93DD00C852695E8B18F0D438EAA8B51DD6EF6
5D3F14E30DD41491D39C83BEC83E914C781196E4EB9E5D8A96F2A5514D462460
5869AC5B54FB940BC0FF739733223ADAB346431B5E824AC04BAC9F2C62A1E349
10DBA46694BD66B3642EE61829AC51DBBF333FCED695660AD76CEAA4E77A22CD
78F3B4061F4375AE004A560512981355D0E4B8B783EFAC2F35820D237140CD37
9E75FB6FEB21AF8DFCED4EDF8B2C8CD07060F7027DA678E650ADF1EBEC47BCCF
27BF3BB3E2CF823F0D1B4D3555941953E8297993E039E0EA83B813ABEDDFDDA4
248F45F8546C71389B373D2030F60EB98456EBC829578E550DD92C362C7196AD
A4DDB7A672E8750840320CADD2995A68B6CE541A3A174C48D01EEEF19F82986E
339B99B75F0942535F3E3B619B94AD63AEA36EEA750E48D0F904D385E808B029
3A9D5E9FBC35B4270D81B1FCA8BE54E576C591D1196DDED33342DF595C504B3B
7BB51B6436E9A53DD1C796F164A7A602A99ACC307645085F1DA8F1EE34F1FD30
CAA2D72CC41BFC19D827C3A7FA9BFFD17DD2AEC41AA019D7B185C06A19871D67
4998192C973F5809C7EF4C225F4180F7C1A8ABE4A4989D06FB6AEC300FBD9792
F5D35FF2C34220B2113BE6D0CE81A13620AA043C921E70284F7B6E358A9F6F49
48A2C43C31F58C9BBE316D2B2DF8DCA423AB23B840667AEFDB871BDB19949368
FF999CD67DA81D654D3E1ACAB38D7B620DF8C42928631368F47123BC317D5ED5
5D03182575284B630ADB3E712E4B1DCC798A3F86B8CDEAFC88F6AE4039AE8753
D011E59A625427B68949C89D76099173EADDF2B3FF108151E4B52D5D67C24A2C
E92DC925412802DB2B6C8EBE24E6FAEDF00BF9F49182A128F309572A55CCC4D9
DA3B177AA2F1A629B97325F818C4BABCA8C2A9E70F134091DDC16A69AA758A74
30BD48CD6CB49339F28F283E1E3A05C9DBE01D84F964CC3058D627CD0191DAE3
33B38ADE3AB56A73FC2B7E52B4B834204FBC41AB78AF879305A0A2B22E41420F
4860E01C3843EC762CB3D2631B99E402417CF91770E3A6627D9E689843DEEC48
D288950FA8FD3FA2FB44F960145FAA75E7E801577735FB0F518243BD64165DFA
53456E6D1951F17A33AB2F908682107A69A46098B8500139475434829A61FBDC
A593656A61C7AE8CF61B27341AC9F7F50D7A49A5B400D84E29C0D04486F0925E
778125C4FABAD95A9A06874C5BF7EF24D19A5C4C6862DC7DEF058DC9286A4575
F934DCF1252BB5F587644F6779D082178DCAF038334135BC10942001ED6E4907
B8752E8B24795F8F5E153EC8BD430D09A5885ACA3663D8E6D46CE478F742E069
7E6CA5A20D570A23291F6F9290761F005A2A3D1D43657704AC8357A9A098AB72
7A6C3E07427732318FB475CFB31DFFD4B3B2592F4A9F0FAB39ED4F7B45B5B9EE
3622BF6F8AEEB3F24EE0A7FDC59D92BAE9D69D2795AFAE078621E7BB4D5159FE
2616836DD740D7C5429DAB2C9071B5DB6EE573A2D2CCBC462246A837FC5E3776
23D9944271C19F338EC8BC226FCD489A59C29221D9122E6496DCC79F875A157E
CFB3C61BB62B4CC11861C13108F6F9351242A0A945E34842B79BFD0F963BA4D7
58FFBA7F9C3DF06634022173735206287D43364571624E94AE037496E8AC4EB2
BB175D168ACE352E51CD2B7CAB5ED47557533E1C9820540BE3EC7A678D797232
7DB970F7D8E3B8BDD69BA8DD3E305FC8E569744A57C4560E570189D10C7E1023
2D5C25B6EBD6078EE71C8DEF8FAD5EAAA2DAFF3D8D03A5B38CBD40C30A9DB09E
021E9B8E200DBD7CAEEF4C4E679C8F358A048147E38B8C1A0BA66F5135645705
F1A825EC4645DB43DBA36CC2B928A5C0F90B2BF7F2B747ACC153162DD98B715E
F35100ED5232E20B8B81D04DEFC16C93F0C25C96ABD7E7CB37977579FFA33077
E1B984AFE5BDBD8DA4A38A8D890BFF40B0907F3BDCAD309ED84C85F6F4831AC7
BB72729DDCF7E171001EE0CAECC0E315231DDD748CA02D21B3E975074FB292CF
BE44037FC9CC1B3272FF56F65334167085E5F89BA14117E50271C4F9510D3D19
04A5A1EA4102AAC9F84D53D462272CE6533E1E0B78A68ACE6B0F304D53F819C3
B63FC830A13E8EDB008CBE932350F2FD9073686F003EAF600856CAA82CFD073C
E81FEFD0B0526EC0EEB44BBE497FB1400BFC1231F4B74F9C0E1803124C66146F
E182F161AF63F547F6FA9DB53174F8B463671FAA8510FA1C88C2C257C88FB50A
4026C1EDFF7BA0C723B6EBF66355FE681998F954B3DBB3E2B27542D38FC3D9FB
7E6B8170D1194D1B64EA38A567E5932DB71A7C47EEC1186696F0E83F7067AAC5
9A6A7A1BC4A27BDECD1FE388E34721951867A0FB1A85B998824BF6511F1AAEE0
D8BDA3586CA4061437F2A432D4AE30FA18C00FA133A5576FD3CBD981B528776F
4B77AA24032BD8547267218D76D95362CB5610585708724517F1174F0F13B777
BA16B992CAC59C8EEE3F646EAE209792C5CFC6A50956D7E022212D4AFD3F70E0
46FD57B19E24E8AE3BA83F2A3629222E52CE64FCCA07C63F7EE748C65FBF2988
5A69D8D51B47656E7A22E349A74FFE96C4661DD25A5D56725C77217F6B311E9F
DAD71AC7D1732577052AD9E38D889D05418EAF830840A73BD2DB0498FE7690FE
76203671E2423ADC32118E86C15426E4FA49EB9622E45801FF0A29945D687A75
B31F88489E4CDD308957A09FBD40723A05C1E14826785042123F578404BB143E
60CF3AF172186552E9231CC55FAAC46EDA9984444FC7509374E2D9175BB3BA70
303F2C006EAA335A906E068C3FBE82DF838D49BA7B27E4904BB275BD3E28BF71
DA8D3410B2CF4626600B10BE6E6BE90EB3E92152CC727535AFE72D7DAD09D3AF
54981D7C999B88588E3BDEA834A3B0F64592C4886BBA85A4C0A125CFC22F5BF1
8F89D806B3E19297EB19930D074D76A35F19891E3842733F8AC91FDEBDF9F8B3
2A59FE9ADEB63633F1C21E5441B02D336DEFA838F06C046670BF3272A4D0BE62
811BBE508DC0A95891BBD0B8ACA80F6E7A468EFFDDA0F44FB32709CC5078ED10
8AA48B64CB919B27CD7107D4222DB031074F2F2E05C1EF64287F63007EC03ADD
23F8EC8FC34C79096446CE8AA4990FAC6E5222D0A270F22E53DD0EA3B3C4A0AB
0AC534CFA9E02B878E71EF2710A5FB847B900E2C910A444453D9FD962E27CB80
AA7307A1C97874366E10EB6B58623A19062E46D06BD13FFFC49BCE9E7A787A5C
6C606DA98D5F283D5AD25F45E4BE0F1F8E0473CC1E85035EABDF761A11D4D1C8
7AF59C3BB8923AEBD25F06B571C6F79E198883194BFEF7AB4D8D80796139C626
FDE82C561961C9A4383888D03587881185BFE5B3947BA0B86EEEC2753F963B1B
B487B46356200BACD8C9D714C9395B1AF1A2D4C57AA06254BF522EB9B71437D8
EA833325C6269F6F0E49752F62BC4957A54C313587EBFAE1DA0FEA4AB3B9882F
BB1594A1BEA609319511754413C2C017559632F5F73765628BA1BD9FD6A97657
F091B14D83F1DF9557309E47E99DFAA8C5568582F3421B637982DE26EC4E5B67
AD529D24ABC4F6A59BD086907418212E12FDFCC02521773DDD57E9CB381FC130
765AA6A16C9EE9BBB1009B02C2CAC70727F24CB57706BD3A13036912134886DB
BEAD1BC5886AF9B1E677F001A87F6E7B25FDF74AA5015237356A6DF0D2680106
0257D983DDD3A6FC9A15E9321CF0990FB21D8F022B52832F01C3337A8FC5B541
D84A92A0FBE137469EE8AEB04176CEF37F1EDD88F115EB0368A02936F6A6A841
618F73506DBD6CBFF30FC2F6D6DCE50D650AE3338EAC68DEFAA2728506C3CAE7
457D4F6FB3919E3DFD4CA00CA5FF26472D066F43EF1F5223B21D2203B0BF9A17
60094D83BC5A23D9D96783497BF0F9B31A55B5C707F1A990AE1B9EC1F03ABD48
0EDCD343705599A58F622A4BF9668E24E9EFA5AF2BE142E67874F32EB22CCC5D
FC78022ED6C5F3A409F28368100A90CEA02C0D419A61557F85551544A1E3A9A2
AB6D9AF8560FFC269CCCBDB4D450E7B698000BF3D5EBECC1B5E914F002017F3C
D108EFB47C448EF985E5AA00D0C0BF50CEADEE6971F5F19FF956D7E80F577DF2
2473C89EDB318F95908C8E18AB74DEF51B9ABBCB87A1C15773B0A60AE70F3E6D
D500F02571B66218ACAC31DF4519B8D6E450295EC4AF31D6073599469F8AAEF1
800B333309F51B3EB5E07045076506F1E474D2D260172296E45CB98114D16A10
15BC291E5C1ECFE8028A329A50DDD9B1D3E406F4E0D11D01E7E81DB6EE40C1EF
3EA02EBE9B54517D963B0BF6DDF5E857CB7118164CCA57A8B2EBB8C4F2A2CC77
DDC7B9C9177B281C2A899A1552966E78CDAEF5A03E65DE5DA728FC518F819822
41F84F9E4A0FE71AE1800A359C7E94FBF72E7ABAE15C7F8399589449C6B0FF73
A6AC3C644C52D252B7F548A5084A23F7A1FD977B001A73E6751F8802679B3745
2368BBABB32683EA87685AAB088FE2894969582EC4D6F49E5F4B583830B49E48
C37B82501843C86EE10B46A77BB91EDC68CF3E2D9833F6C8D2D83B8B842C6165
DFCE01E23EDDD8518240B7940DD3D047E35F24AB9356D250A178A7B94EC9CD58
F46905F9EB82841081FF965152D1C51B5A7D6E7169CFE8F5891E40A5A689A7FF
359B99430796D9BF1E6ADC1D1266952377D7332F5087553F6A983F2435A0958F
C0DB165D65F718C867DE9F3379CE987830B28FC9622BCD6479654D4F8B11EDC8
B9A0488A4507DF37184341002EEB5DAAAC7580F995223A873850BC124B9EA0E4
47679F8477A683144398D4E9F6C8D70E2F95414A00F3C9DD0C19B9BE7F59D359
C188F87BD66D39478DB9E1068E9973EA4FBA38ECF41AC9A5BF8AE97717F65795
52B7196053F0789B1AF27711751408BAA2047DC7F34C268375D899C9D7F48964
4143E26B7DC2302B59639C3F404FEC32B6703C9B0372A763762775ABF1528A93
5E6A69C5868A26505CC8234F7B60C5FCEDAA88F72B1F5D9489E226B0AA0E1CEA
4DF6BB5801D5CEB5D8826AB51AEC5B9A9A2DC7B3366810979F098A8B9353F5F4
605A66D92A9446851E3A06534B7A255EE7398DC3B82E31D384D5C112304C1726
10F14FADE07CFCADA698140B1F04EE17FC477850E99BEC0ECDA1EB92E42A257C
92DCC749F9C10863114EA3A4683B75CCB59B6D828A1ADBB28F2196846AB2856C
A74B364807B9C1FF3400D1627F0D4C225BE1580626B0F9A758A6F71D7EA9E547
A775DE88FC98C2830B7D82CAA36800F31391B5C311385E116F7C48E4EE72FDF2
5B159AC2E1ACD788A0C8DBB95427CECF8812BE0AE2CB3C2862F27D238F8ACA20
8DA397AB3F4A443616CFA6A6BBFCB03E8E9AF61B100F08F2041BC56EE48A132E
7BF1959054044A3B99A3CE0A9D9A9BB0204CDEB7B7DA21B8297BE50D3FCDBB92
7D89F66AE816F36CD41F590AD0F14B073C304CF2966C666A16920389C77A0050
0971E37DD3EDE5358EBC3C064256DCF90F01B8AC0379ED3B6502E8116FFF2616
B033EA9FD601A7830A9718F2EEB93C001EAEA7D86D5649B7F68F33D5BBACC32E
018E0A2C6D7E982AE661DD27D850BDE8E61FC0B3005CB0CDDA49BC4C51C68998
D09E2B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600 (actualpresent_ras1.dvi)
@start /Fa 146[42 11[25 97[{}2 49.8132 /CMSSI8 rf /Fb
144[45 47 5[47 45 1[40 47 40 47 44 41[45 55[{}10 90.9091
/CMSS10 rf /Fc 145[47 110[{}1 90.9091 /CMSSI10 rf /Fd
158[56 97[{}1 119.552 /CMSSI12 rf /Fe 137[54 1[42 45
40 2[59 2[28 2[28 1[59 1[52 2[60 56 12[80 16[75 8[33
8[59 49[{}15 119.552 /CMSS12 rf /Ff 133[23 24 1[36 1[27
19 20 18 2[26 27 42 13 2[13 27 26 16 24 1[24 27 25 12[36
29 34 1[34 2[46 2[25 15 2[30 1[38 1[35 4[41 3[26 26 26
26 26 26 26 26 26 26 26 5[21 21 15 39[{}44 49.8132 /CMSS8
rf /Fg 138[69 49 52 46 2[67 69 2[66 1[32 69 67 1[60 3[65
7[90 4[92 3[86 6[37 39[43 33[{}17 143.462 /CMSS17 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -600 1668 3024 2268 v 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2424 1668
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.32 0 0.47499 0.7 TeXcolorcmyk
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.128 0 0.19 0.28 TeXcolorcmyk 1330 1567 a

 1330 1567
a 1330 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf1

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1330 1579 a
SDict begin H.S end
 1330 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1380 1517
a
SDict begin H.R end
 1380 1517 a 1380 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1380 1579 a 1380 1579 a
SDict begin H.S end
 1380
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1446 1517 a
SDict begin H.R end
 1446 1517 a 1446 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1446
1579 a 1446 1579 a
SDict begin H.S end
 1446 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1496 1517 a
SDict begin H.R end
 1496 1517
a 1496 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1496 1579 a 1511 1567 a

 1511 1567 a 1511
1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf3

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1511 1579 a
SDict begin H.S end
 1511 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1552 1517
a
SDict begin H.R end
 1552 1517 a 1552 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1552 1579 a 1552 1579 a
SDict begin H.S end
 1552
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1594 1517 a
SDict begin H.R end
 1594 1517 a 1594 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1594
1579 a 1594 1579 a
SDict begin H.S end
 1594 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1636 1517 a
SDict begin H.R end
 1636 1517
a 1636 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1636 1579 a 1636 1579 a
SDict begin H.S end
 1636 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1677 1517
a
SDict begin H.R end
 1677 1517 a 1677 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1677 1579 a 1692 1567 a

 1692
1567 a 1692 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf5

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1692 1579 a
SDict begin H.S end
 1692 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1733 1517
a
SDict begin H.R end
 1733 1517 a 1733 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1733 1579 a 1733 1579 a
SDict begin H.S end
 1733
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1775 1517 a
SDict begin H.R end
 1775 1517 a 1775 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1775
1579 a 1775 1579 a
SDict begin H.S end
 1775 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1816 1517 a
SDict begin H.R end
 1816 1517
a 1816 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1816 1579 a 1816 1579 a
SDict begin H.S end
 1816 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1858 1517
a
SDict begin H.R end
 1858 1517 a 1858 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1858 1579 a 1872 1567 a

 1872
1567 a 1872 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf7

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1872 1579 a
SDict begin H.S end
 1872 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1914 1517
a
SDict begin H.R end
 1914 1517 a 1914 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1914 1579 a 1914 1579 a
SDict begin H.S end
 1914
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1955 1517 a
SDict begin H.R end
 1955 1517 a 1955 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1955
1579 a 1955 1579 a
SDict begin H.S end
 1955 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1997 1517 a
SDict begin H.R end
 1997 1517
a 1997 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1997 1579 a 1997 1579 a
SDict begin H.S end
 1997 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2039 1517
a
SDict begin H.R end
 2039 1517 a 2039 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 2039 1579 a 2053 1567 a

 2053
1567 a 2053 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2053 1579 a
SDict begin H.S end
 2053 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2128 1517
a
SDict begin H.R end
 2128 1517 a 2128 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2128 1579 a 2128 1579 a
SDict begin H.S end
 2128
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 2219 1517 a
SDict begin H.R end
 2219 1517 a 2219 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 2219
1579 a 2234 1567 a

 2234 1567 a 2234 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1579
a
SDict begin H.S end
 2234 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 2292 1517 a
SDict begin H.R end
 2292 1517 a 2292 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292
1579 a 2292 1579 a
SDict begin H.S end
 2292 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 2342 1517 a
SDict begin H.R end
 2342 1517
a 2342 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1579 a 2342 1579 a
SDict begin H.S end
 2342 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2400 1517
a
SDict begin H.R end
 2400 1517 a 2400 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400 1579 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray Black 0
TeXcolorgray -509 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -509 -600 a -509 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -509
-600 a -509 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -509 -600 a -509 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -509 -600
a -509 -600 a
SDict begin [/Count 0/Dest (Outline1) cvn/Title (Testing) /OUT pdfmark
end
 -509 -600 a -509 -600 a
SDict begin [/Count 0/Dest (Outline2) cvn/Title (Thank You !) /OUT
pdfmark end
 -509 -600 a -509
-600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -509 -600 a -509 -600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -509 -600 a -509 -600
a
SDict begin H.S end
 -509 -600 a -509 -600 a
SDict begin 13.6 H.A end
 -509 -600 a -509 -600 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -509
-600 a -509 -600 a
SDict begin [/Producer (dvips + Distiller)/Title (Incremental Data Flow analysis using PRISM)/Subject
()/Creator (LaTeX with Beamer class version 3.24)/Author (Rashmi Rekha Mech \040\(Project Guide: Prof. Uday Khedker\))/Keywords
() /DOCINFO pdfmark end
 -509 -600 a -509 -600 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>1<</P(2)>>2<</P(3)>>]>>>>
/PUT pdfmark end
 -509 -600
a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-509 -600 a
SDict begin H.S end
 -509 -600 a -509 -600 a
SDict begin 13.6 H.A end
 -509 -600 a -509
-600 a
SDict begin [/View [/XYZ H.V]/Dest (Outline1) cvn /DEST pdfmark end
 -509 -600 a 0 TeXcolorgray 0 TeXcolorgray 752
126 a Fg(P)l(a)l(rt)45 b(I)p 0 TeXcolorgray -509 259
a

 -509 259 a -509 259 a


 pgfo

 save

 0 setgray

 0.3985 pgfw
 0.32 0 0.47499 0.7 TeXcolorcmyk
 -4.00005 -1.0 moveto

 -4.00005 1.2 -2.20001 3.00003 0.0 3.00003 curveto

 341.02087 3.00003 lineto

 343.2209 3.00003 345.02094 1.2 345.02094 -1.0 curveto

 345.02094 -3.48697 lineto

 -4.00005 -3.48697 lineto

 pgffill

0 TeXcolorgray
 newpath

 restore

 pgfc


 -509 610 a

 -509 610 a -509 610 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 [1.0 0.0 0.0 1.0 0.0 -7.00008 ] concat

 pgfs


 -509
610 a

 -509 610 a -509 610 a


 pgfo

 4.00005 4.00005 4.00005 4.00005 pgfR1 0.0 1 1 1 0.5 0.5 0.5 pgfshade
 0.5 0.5 0.5 0.0 pgfR2

 pgfc


 -509 610 a


 pgfr

 restore

 save

 9.00009 9.00009 340.02087 -7.00008 pgfe

 clip

 newpath

 save

 [1.0 0.0 0.0 1.0 333.02078 -7.00009 ] concat

 pgfs


 -509 610 a

 -509
610 a -509 610 a


 pgfo

 8.00009 8.00009 8.00009 8.00009 pgfR1 4.00005 1 1 1 0.5 0.5 0.5 pgfshade
0.0 0.5 0.5 0.5 0.5 0.5 0.5 pgfshade  0.5 0.5 0.5 0.0 pgfR2

 pgfc


 -509 610 a


 pgfr

 restore

 restore

 save

 5.00005 337.02083 4.00005 -7.00008 pgfe

 clip

 newpath

 save

 [1.0 0.0 0.0 1.0 4.00005 -7.00008 ] concat

 pgfs


 -509 610 a

 -509 610 a -509
610 a


 pgfo

 8.00009 5669.36443 0.0 0.0 pgfe

 clip

 newpath

 8.00009 5669.36443 pgfV 4.00005 0.5 0.5 0.5 0.5 0.5 0.5 pgfshade 0.0
0.5 0.5 0.5 1 1 1 pgfshade  pop

 pgfc


 -509 610 a


 pgfr

 restore

 restore

 save

 41.19215 4.00005 345.02094 1.0 pgfe

 clip

 newpath

 save

 [1.0 0.0 0.0 1.0 341.02087 33.19205 ] concat

 pgfs


 -509 610 a

 -509 610 a -509 610 a


 pgfo

 4.00005 4.00005 4.00005 4.00005 pgfR1 0.0 1 1 1 0.5 0.5 0.5 pgfshade
 0.5 0.5 0.5 0.0 pgfR2

 pgfc


 -509
610 a


 pgfr

 restore

 36.19211 4.00005 345.02094 1.0 pgfe

 clip

 newpath

 save

 [0.0 1.0 -1.0 0.0 349.02098 -3.00003 ] concat

 pgfs


 -509 610 a

 -509 610 a -509 610 a


 pgfo

 8.00009 5669.36443 0.0 0.0 pgfe

 clip

 newpath

 8.00009 5669.36443 pgfV 4.00005 0.5 0.5 0.5 0.5 0.5 0.5 pgfshade 0.0
0.5 0.5 0.5 1 1 1 pgfshade  pop

 pgfc


 -509 610 a


 pgfr

 restore

 restore

 0.32 0 0.47499 0.7 setcmykcolor

 -4.00005 1.0 moveto

 -4.00005 -1.2 -2.20001 -3.00003 0.0 -3.00003 curveto

 341.02087 -3.00003 lineto

 343.2209 -3.00003 345.02094 -1.2 345.02094 1.0 curveto

 345.02094 41.67535 lineto

 -4.00005 41.67535 lineto

 pgffill
 0.5
TeXcolorgray
 0.0 pgfw

 345.02094 -0.49998 moveto

 345.02094 38.19211 lineto

 pgfstr
 0.69 TeXcolorgray
 345.02094 38.19211 moveto

 345.02094 39.19211 lineto

 pgfstr
 0.81 TeXcolorgray
 345.02094 39.19211 moveto

 345.02094 40.19211 lineto

 pgfstr
 0.94
TeXcolorgray
 345.02094 40.19211 moveto

 345.02094 41.19211 lineto

 pgfstr
 1 TeXcolorgray
 345.02094 41.19211 moveto

 345.02094 42.69212 lineto

 pgfstr
 0.94 TeXcolorgray 0.81 TeXcolorgray
0.69 TeXcolorgray 0.5 TeXcolorgray 0 TeXcolorgray
 newpath

 restore

 pgfc


 1 TeXcolorgray
1 TeXcolorgray 707 506 a
SDict begin H.S end
 707 506 a 1 TeXcolorgray -28
x Fg(T)-11 b(esting)p 1 TeXcolorgray 1117 379 a
SDict begin H.R end
 1117
379 a 1117 478 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1117 478 a 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.16 0 0.23749 0.84999 TeXcolorcmyk 0.16 0 0.23749 0.84999
TeXcolorcmyk -600 1668 1008 72 v 0.16 0 0.23749 0.84999
TeXcolorcmyk 0 TeXcolorgray 1 TeXcolorgray -352 1646
a Ff(June'15)36 b(\(I)q(IT)18 b(Bomba)o(y)q(\))p 0 TeXcolorgray
0.16 0 0.23749 0.84999 TeXcolorcmyk 0 TeXcolorgray 0.24 0 0.35625 0.775
TeXcolorcmyk 0.24 0 0.35625 0.775 TeXcolorcmyk 408 1668
V 0.24 0 0.35625 0.775 TeXcolorcmyk 0 TeXcolorgray 1
TeXcolorgray 413 1656 a
SDict begin H.S end
 413 1656 a 1 TeXcolorgray -10
x Ff(Incremental)e(Data)j(Flo)o(w)f(analysis)h(using)g(PRISM)p
1 TeXcolorgray 1411 1611 a
SDict begin H.R end
 1411 1611 a 1411 1646 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1411
1646 a 0 TeXcolorgray 0.24 0 0.35625 0.775 TeXcolorcmyk
0 TeXcolorgray 0.32 0 0.47499 0.7 TeXcolorcmyk 0.32 0 0.47499 0.7
TeXcolorcmyk 1416 1668 1008 72 v 0.32 0 0.47499 0.7 TeXcolorcmyk
0 TeXcolorgray 1 TeXcolorgray 854 w Ff(1)f(/)g(3)p 0
TeXcolorgray 0.32 0 0.47499 0.7 TeXcolorcmyk 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 2333 1668 a
SDict begin H.S end
 2333 1668 a
2333 1668 a
SDict begin H.R end
 2333 1668 a 2333 1668 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 2333 1668 a 2333
1668 a
SDict begin H.S end
 2333 1668 a 2333 1668 a
SDict begin H.R end
 2333 1668 a 2333 1668
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 2333 1668 a 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.32 0 0.47499 0.7 TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.128 0 0.19 0.28 TeXcolorcmyk 1330 1567
a

 1330 1567 a 1330 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf1

 restore

0.128 0 0.19 0.28 TeXcolorcmyk
 newpath

 restore

 pgfc


 1330 1579 a
SDict begin H.S end
 1330 1579
a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk
1380 1517 a
SDict begin H.R end
 1380 1517 a 1380 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1380 1579 a 1380
1579 a
SDict begin H.S end
 1380 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1446 1517 a
SDict begin H.R end
 1446 1517 a 1446 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1446
1579 a 1446 1579 a
SDict begin H.S end
 1446 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1496 1517 a
SDict begin H.R end
 1496 1517
a 1496 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1496 1579 a 1511 1567 a

 1511 1567 a 1511
1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf3

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1511 1579 a
SDict begin H.S end
 1511 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1552 1517
a
SDict begin H.R end
 1552 1517 a 1552 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1552 1579 a 1552 1579 a
SDict begin H.S end
 1552
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1594 1517 a
SDict begin H.R end
 1594 1517 a 1594 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1594
1579 a 1594 1579 a
SDict begin H.S end
 1594 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1636 1517 a
SDict begin H.R end
 1636 1517
a 1636 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1636 1579 a 1636 1579 a
SDict begin H.S end
 1636 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1677 1517
a
SDict begin H.R end
 1677 1517 a 1677 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1677 1579 a 1692 1567 a

 1692
1567 a 1692 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf5

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1692 1579 a
SDict begin H.S end
 1692 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1733 1517
a
SDict begin H.R end
 1733 1517 a 1733 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1733 1579 a 1733 1579 a
SDict begin H.S end
 1733
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1775 1517 a
SDict begin H.R end
 1775 1517 a 1775 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1775
1579 a 1775 1579 a
SDict begin H.S end
 1775 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1816 1517 a
SDict begin H.R end
 1816 1517
a 1816 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1816 1579 a 1816 1579 a
SDict begin H.S end
 1816 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1858 1517
a
SDict begin H.R end
 1858 1517 a 1858 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1858 1579 a 1872 1567 a

 1872
1567 a 1872 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf7

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1872 1579 a
SDict begin H.S end
 1872 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1914 1517
a
SDict begin H.R end
 1914 1517 a 1914 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1914 1579 a 1914 1579 a
SDict begin H.S end
 1914
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1955 1517 a
SDict begin H.R end
 1955 1517 a 1955 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1955
1579 a 1955 1579 a
SDict begin H.S end
 1955 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1997 1517 a
SDict begin H.R end
 1997 1517
a 1997 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1997 1579 a 1997 1579 a
SDict begin H.S end
 1997 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2039 1517
a
SDict begin H.R end
 2039 1517 a 2039 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 2039 1579 a 2053 1567 a

 2053
1567 a 2053 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2053 1579 a
SDict begin H.S end
 2053 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2128 1517
a
SDict begin H.R end
 2128 1517 a 2128 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2128 1579 a 2128 1579 a
SDict begin H.S end
 2128
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 2219 1517 a
SDict begin H.R end
 2219 1517 a 2219 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 2219
1579 a 2234 1567 a

 2234 1567 a 2234 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1579
a
SDict begin H.S end
 2234 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 2292 1517 a
SDict begin H.R end
 2292 1517 a 2292 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292
1579 a 2292 1579 a
SDict begin H.S end
 2292 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 2342 1517 a
SDict begin H.R end
 2342 1517
a 2342 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1579 a 2342 1579 a
SDict begin H.S end
 2342 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2400 1517
a
SDict begin H.R end
 2400 1517 a 2400 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400 1579 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 0.32 0 0.47499 0.7 TeXcolorcmyk
0.32 0 0.47499 0.7 TeXcolorcmyk -600 -370 3024 230 v
0.32 0 0.47499 0.7 TeXcolorcmyk 1 TeXcolorgray 1 TeXcolorgray
-529 -433 a Fe(T)-10 b(est)39 b(Case)g(1)f(:)52 b Fd(a)41
b Fe(is)d(a)h(global)e(va)m(riable)p 1 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-509 1555 a


 gsave nulldevice


 -509 1555 a


 grestore


 -509 1555 a
tx@Dict begin { 71.13152 190.63246 } PutCoor PutBegin  end
 -509 1555 a -599
1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n1 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 156.48933 219.08507 } PutCoor PutBegin  end
 -509 1555 a -930
1578 a
tx@Dict begin  tx@NodeDict begin {7.60416 2.12917 101.4215 50.71074
2.73749 } false /N@n 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -930 1578 a 1 0 0 TeXcolorrgb Fc(n)r Fb(7)30 b(b)s(e)g(a)g
(changed)i(no)s(de)p 0 TeXcolorgray -509 1555 a
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 71.13152 199.16824 } PutCoor PutBegin  end
 -509 1555 a -563 1572 a
tx@Dict begin  tx@NodeDict begin {4.11162 0.0 12.93764 6.46881 2.0558
} false /N@a 16 {InitRnode } /NodeScale {} def NewNode end  end
 -563 1572
a Ff(main)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 56.90521 190.63246 } PutCoor PutBegin  end
 -509 1555
a -536 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a1 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n1)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555
a -509 1555 a
tx@Dict begin { 71.13152 176.40616 } PutCoor PutBegin  end
 -509 1555 a -567 1567 a
tx@Dict begin  tx@NodeDict begin {6.20715 3.20715 13.96652 6.98326
1.5 } false /N@n2 16 {InitRnode } /NodeScale {} def NewNode end  end
 -567 1567 a 14
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 3.20715 neg 12.25937
6.20715 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(if\()17 b(\))-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 56.90521 176.40616 } PutCoor PutBegin  end
 -509 1555 a -536 1572
a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a2 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n2)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555
a
tx@Dict begin { 99.58412 162.17986 } PutCoor PutBegin  end
 -509 1555 a -609 1567 a
tx@Dict begin  tx@NodeDict begin {6.20715 3.20715 24.01872 12.00935
1.5 } false /N@n3 16 {InitRnode } /NodeScale {} def NewNode end  end
 -609 1567 a 14 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 3.20715 neg 22.31157
6.20715 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(while\()g(\))-509 1555 y
tx@Dict begin  PutEnd  end

-509 1555 a -509 1555 a
tx@Dict begin { 82.51256 162.17986 } PutCoor PutBegin  end
 -509 1555 a -536 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a3 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536
1572 a Ff(n3)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 99.58412 147.95355 } PutCoor PutBegin  end
 -509
1555 a -586 1572 a
tx@Dict begin  tx@NodeDict begin {5.64465 1.70715 18.58118 9.29059
1.96875 } false /N@n4 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -586 1572 a 14 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 1.70715 neg 16.87402
5.64465 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial Ff(z)h(=)f(1)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 85.35782 147.95355 } PutCoor PutBegin  end
 -509 1555 a -536 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a4 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n4)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 99.58412 133.72725 } PutCoor PutBegin  end
 -509 1555 a -567 1567
a
tx@Dict begin  tx@NodeDict begin {6.20715 3.20715 13.96652 6.98326
1.5 } false /N@n5 16 {InitRnode } /NodeScale {} def NewNode end  end
 -567 1567 a 14 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 3.20715 neg 12.25937
6.20715 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Ff(if\()g(\))-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 85.35782 133.72725 } PutCoor PutBegin  end
 -509
1555 a -536 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a5 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n5)-509 1555 y
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 73.97678 119.50095 } PutCoor PutBegin  end
 -509 1555 a -567 1567 a
tx@Dict begin  tx@NodeDict begin {6.20715 3.20715 13.96652 6.98326
1.5 } false /N@n6 16 {InitRnode } /NodeScale {} def NewNode end  end
 -567 1567
a 14 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 3.20715 neg 12.25937
6.20715 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(if\()g(\))-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 62.59573 119.50095 } PutCoor PutBegin  end
 -509 1555 a -536 1572
a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a6 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n6)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555
a
tx@Dict begin { 142.26303 119.50095 } PutCoor PutBegin  end
 -509 1555 a -565 1566 a
tx@Dict begin  tx@NodeDict begin {4.37381 1.70715 13.56027 6.78014
1.33333 } false /N@n7 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -565 1566 a 14 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 1.70715 neg 11.85312
4.37381 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(a)h(=)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555
a -509 1555 a
tx@Dict begin { 128.03673 119.50095 } PutCoor PutBegin  end
 -509 1555 a -536 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a7 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n7)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 142.26303 105.27464 } PutCoor PutBegin  end
 -509 1555 a -599 1555
a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n9 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 128.03673 105.27464 } PutCoor PutBegin  end
 -509 1555 a -536
1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a9 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n9)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 142.26303 91.04834 } PutCoor PutBegin  end
 -509 1555 a -600 1567 a
tx@Dict begin  tx@NodeDict begin {6.20715 3.20715 21.86246 10.93123
1.5 } false /N@n11 16 {InitRnode } /NodeScale {} def NewNode end  end
 -600 1567 a 14 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 3.20715 neg 20.1553 6.20715
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(func\()g(\))-509 1555 y
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 122.3462 91.04834 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a11 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572
a Ff(n11)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 99.58412 105.27464 } PutCoor PutBegin  end
 -509 1555
a -564 1566 a
tx@Dict begin  tx@NodeDict begin {4.37381 1.70715 13.2686 6.6343 1.33333
} false /N@n8 16 {InitRnode } /NodeScale {} def NewNode end  end
 -564 1566 a 14 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 1.70715 neg 11.56145
4.37381 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial Ff(z)g(=)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555
a
tx@Dict begin { 85.35782 105.27464 } PutCoor PutBegin  end
 -509 1555 a -536 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 6.47925 3.23962 1.96875
} false /N@a8 16 {InitRnode } /NodeScale {} def NewNode end  end
 -536 1572 a Ff(n8)-509 1555
y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 99.58412 91.04834 } PutCoor PutBegin  end
 -509 1555 a -613 1567 a
tx@Dict begin  tx@NodeDict begin {6.20715 3.20715 25.05 12.525 1.5
} false /N@n10 16 {InitRnode } /NodeScale {} def NewNode end  end
 -613
1567 a 14 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 3.20715 neg 23.34285
6.20715 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(func1\()g(\))-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 79.6673 91.04834 } PutCoor PutBegin  end
 -509 1555 a -549 1572
a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a10 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n10)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555
a
tx@Dict begin { 113.81042 71.13152 } PutCoor PutBegin  end
 -509 1555 a -565 1566 a
tx@Dict begin  tx@NodeDict begin {4.37381 1.70715 13.56027 6.78014
1.33333 } false /N@n12 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -565 1566 a 14 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 1.70715 neg 1.70715 neg 11.85312
4.37381 .5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(a)g(=)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555
a -509 1555 a
tx@Dict begin { 99.58412 71.13152 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a12 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n12)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 54.05995 91.04834 } PutCoor PutBegin  end
 -509 1555 a -599 1555
a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n13 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 36.98839 91.04834 } PutCoor PutBegin  end
 -509 1555 a -549
1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a13 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n13)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 54.05995 76.82204 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n14 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0.3 true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 36.98839 76.82204 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a14 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n14)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n1
/N@n2 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n2
/N@n3 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n3
/N@n4 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n4
/N@n5 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509
1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n5
/N@n6 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n5
/N@n7 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555
a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n7
/N@n9 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n9
/N@n11 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509
1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n11
/N@n12 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n6
/N@n8 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n8
/N@n10 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n10
/N@n12 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n6
/N@n13 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509
1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n13
/N@n14 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n2
/N@n13 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555
a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 5.69052 5.69052 neg 0.0 0.0
0 0 /N@n12 /N@n3 InitNC {  tx@Dict begin  /r 1.42262 def /Lineto {
Arcto } def 0  setlinejoin false pop end /AngleA -90. def /AngleB 90.
def /ArmA 8.53578 def /ArmB 8.53578 def /ArmTypeA 0 def /ArmTypeB 0
def /loopsize -42.67891 def NCLoop  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 -509 1555 a -509 1555 a
tx@Dict begin { 241.84715 190.63246 } PutCoor PutBegin  end
 -509 1555 a -614
1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 25.27403 12.63701
0.0 } false /N@n15 16 {InitRnode } /NodeScale {} def NewNode end  end
 -614 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 21.5752 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 241.84715 199.16824 } PutCoor PutBegin  end
 -509 1555 a -586
1567 a
tx@Dict begin  tx@NodeDict begin {4.5 1.5 18.44815 9.22408 1.5 } false
/N@m15 16 {InitRnode } /NodeScale {} def NewNode end  end
 -586 1567 a Ff(func\()g(\))-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555
a -509 1555 a
tx@Dict begin { 224.77559 190.63246 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a15 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n15)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 241.84715 176.40616 } PutCoor PutBegin  end
 -509 1555 a -582 1566
a
tx@Dict begin  tx@NodeDict begin {6.3655 3.69884 17.6002 8.8001 1.33333
} false /N@n160 16 {InitRnode } /NodeScale {} def NewNode end  end
 -582 1566 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 13.90137 6.3655
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(a)g Ff(=)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 227.62085 176.40616 } PutCoor PutBegin  end
 -509
1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a16 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n16)-509 1555 y
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 241.84715 162.17986 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n17 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555
a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555
a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 224.77559 162.17986 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a17 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549
1572 a Ff(n17)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 216.2398 147.95355 } PutCoor PutBegin  end
 -509
1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n18 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial -509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 199.16824 147.95355 } PutCoor PutBegin  end
 -509
1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a18 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n18)-509 1555 y
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 267.4545 147.95355 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n19 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555
a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555
a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 250.38293 147.95355 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a19 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549
1572 a Ff(n19)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 241.84715 133.72725 } PutCoor PutBegin  end
 -509
1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n20 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial -509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 224.77559 133.72725 } PutCoor PutBegin  end
 -509
1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a20 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n20)-509 1555 y
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 241.84715 119.50095 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n00 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555
a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555
a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n15
/N@n160 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n160
/N@n17 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509
1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n17
/N@n18 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n17
/N@n19 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555
a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n19
/N@n20 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n18
/N@n20 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509
1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n20
/N@n00 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 2.84526 2.84526 neg 0.0 0.0
0 0 /N@n20 /N@n17 InitNC {  tx@Dict begin  /r 1.42262 def /Lineto {
Arcto } def 0  setlinejoin false pop end /AngleA -90. def /AngleB 90.
def /ArmA 4.26788 def /ArmB 4.26788 def /ArmTypeA 0 def /ArmTypeB 0
def /loopsize -39.83365 def NCLoop  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 -509 1555 a -509 1555
a
tx@Dict begin { 241.84715 85.35782 } PutCoor PutBegin  end
 -509 1555 a -614 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 25.27403 12.63701
0.0 } false /N@n21 16 {InitRnode } /NodeScale {} def NewNode end  end
 -614 1555 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 21.5752 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 241.84715 93.8936 } PutCoor PutBegin  end
 -509 1555 a -611 1567 a
tx@Dict begin  tx@NodeDict begin {4.5 1.5 24.57323 12.2866 1.5 } false
/N@m21 16 {InitRnode } /NodeScale {} def NewNode end  end
 -611 1567 a Ff(func1\(m\))-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 224.77559 85.35782 } PutCoor PutBegin  end
 -509 1555 a -549 1572
a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a21 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n21)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555
a
tx@Dict begin { 241.84715 71.13152 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n22 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 224.77559 71.13152 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a22 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n22)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 221.93033 56.90521 } PutCoor PutBegin  end
 -509 1555 a -599 1555
a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n23 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 204.85876 56.90521 } PutCoor PutBegin  end
 -509 1555 a -549
1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a23 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n23)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 261.76398 56.90521 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n24 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555 a 31 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555 a
tx@Dict begin  PutEnd  end
 -509 1555 a -509
1555 a
tx@Dict begin { 244.69241 56.90521 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a24 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n24)-509
1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 241.84715 42.67891 } PutCoor PutBegin  end
 -509 1555 a -574 1566
a
tx@Dict begin  tx@NodeDict begin {4.37381 1.70715 15.66484 7.83241
1.33333 } false /N@n25 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -574 1566 a 14 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 1.70715 neg 1.70715 neg 13.95769 4.37381
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(m)h Ff(=)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 224.77559 42.67891 } PutCoor PutBegin  end
 -509
1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a25 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549 1572 a Ff(n25)-509 1555 y
tx@Dict begin  PutEnd  end
 -509
1555 a -509 1555 a
tx@Dict begin { 241.84715 28.4526 } PutCoor PutBegin  end
 -509 1555 a -599 1555 a
tx@Dict begin  tx@NodeDict begin {3.69884 3.69884 21.62404 10.81201
0.0 } false /N@n26 16 {InitRnode } /NodeScale {} def NewNode end  end
 -599 1555
a 31 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  0. true 3.69884 neg 3.69884 neg 17.9252 3.69884
.5 Frame  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -509 1555
a
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin { 224.77559 28.4526 } PutCoor PutBegin  end
 -509 1555 a -549 1572 a
tx@Dict begin  tx@NodeDict begin {3.9375 0.0 9.6668 4.83339 1.96875
} false /N@a26 16 {InitRnode } /NodeScale {} def NewNode end  end
 -549
1572 a Ff(n26)-509 1555 y
tx@Dict begin  PutEnd  end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n21
/N@n22 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509
1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n22
/N@n23 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n23
/N@n25 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555
a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n22
/N@n24 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n24
/N@n25 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509
1555 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@n25
/N@n26 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -509 1555 a -509 1555 a


 gsave nulldevice


 -509 1555 a


 grestore


 2562 1555
a


 gsave nulldevice


 2562 1555 a


 grestore


 2562 1555 a


 gsave nulldevice


 2562 1555 a


 grestore


 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.16 0 0.23749 0.84999
TeXcolorcmyk 0.16 0 0.23749 0.84999 TeXcolorcmyk -600
1668 1008 72 v 0.16 0 0.23749 0.84999 TeXcolorcmyk 0
TeXcolorgray 1 TeXcolorgray -352 1646 a Ff(June'15)36
b(\(I)q(IT)18 b(Bomba)o(y)q(\))p 0 TeXcolorgray 0.16 0 0.23749 0.84999
TeXcolorcmyk 0 TeXcolorgray 0.24 0 0.35625 0.775 TeXcolorcmyk
0.24 0 0.35625 0.775 TeXcolorcmyk 408 1668 V 0.24 0 0.35625 0.775
TeXcolorcmyk 0 TeXcolorgray 1 TeXcolorgray 413 1656 a
SDict begin H.S end

413 1656 a 1 TeXcolorgray -10 x Ff(Incremental)e(Data)j(Flo)o(w)f
(analysis)h(using)g(PRISM)p 1 TeXcolorgray 1411 1611
a
SDict begin H.R end
 1411 1611 a 1411 1646 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1411 1646 a 0 TeXcolorgray
0.24 0 0.35625 0.775 TeXcolorcmyk 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0.32 0 0.47499 0.7 TeXcolorcmyk 1416 1668
1008 72 v 0.32 0 0.47499 0.7 TeXcolorcmyk 0 TeXcolorgray
1 TeXcolorgray 854 w Ff(2)f(/)g(3)p 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2333 1668 a
SDict begin H.S end
 2333 1668 a 2333 1668 a
SDict begin H.R end
 2333 1668 a 2333
1668 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation2) cvn /DEST pdfmark
end
 2333 1668 a 2333 1668 a
SDict begin H.S end
 2333 1668 a 2333 1668
a
SDict begin H.R end
 2333 1668 a 2333 1668 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 2333 1668 a 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.32 0 0.47499 0.7 TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.128 0 0.19 0.28 TeXcolorcmyk 1330 1567
a

 1330 1567 a 1330 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf1

 restore

0.128 0 0.19 0.28 TeXcolorcmyk
 newpath

 restore

 pgfc


 1330 1579 a
SDict begin H.S end
 1330 1579
a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk
1380 1517 a
SDict begin H.R end
 1380 1517 a 1380 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1380 1579 a 1380
1579 a
SDict begin H.S end
 1380 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1446 1517 a
SDict begin H.R end
 1446 1517 a 1446 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1446
1579 a 1446 1579 a
SDict begin H.S end
 1446 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1496 1517 a
SDict begin H.R end
 1496 1517
a 1496 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1496 1579 a 1511 1567 a

 1511 1567 a 1511
1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf3

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1511 1579 a
SDict begin H.S end
 1511 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1552 1517
a
SDict begin H.R end
 1552 1517 a 1552 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1552 1579 a 1552 1579 a
SDict begin H.S end
 1552
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1594 1517 a
SDict begin H.R end
 1594 1517 a 1594 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1594
1579 a 1594 1579 a
SDict begin H.S end
 1594 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1636 1517 a
SDict begin H.R end
 1636 1517
a 1636 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1636 1579 a 1636 1579 a
SDict begin H.S end
 1636 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1677 1517
a
SDict begin H.R end
 1677 1517 a 1677 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1677 1579 a 1692 1567 a

 1692
1567 a 1692 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf5

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1692 1579 a
SDict begin H.S end
 1692 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1733 1517
a
SDict begin H.R end
 1733 1517 a 1733 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1733 1579 a 1733 1579 a
SDict begin H.S end
 1733
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1775 1517 a
SDict begin H.R end
 1775 1517 a 1775 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1775
1579 a 1775 1579 a
SDict begin H.S end
 1775 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1816 1517 a
SDict begin H.R end
 1816 1517
a 1816 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1816 1579 a 1816 1579 a
SDict begin H.S end
 1816 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1858 1517
a
SDict begin H.R end
 1858 1517 a 1858 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1858 1579 a 1872 1567 a

 1872
1567 a 1872 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.064 0 0.095 0.14 TeXcolorcmyk
 save

 pgf7

 restore
 0.128 0 0.19 0.28
TeXcolorcmyk
 newpath

 restore

 pgfc


 1872 1579 a
SDict begin H.S end
 1872 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 1914 1517
a
SDict begin H.R end
 1914 1517 a 1914 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1914 1579 a 1914 1579 a
SDict begin H.S end
 1914
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 1955 1517 a
SDict begin H.R end
 1955 1517 a 1955 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1955
1579 a 1955 1579 a
SDict begin H.S end
 1955 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 1997 1517 a
SDict begin H.R end
 1997 1517
a 1997 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1997 1579 a 1997 1579 a
SDict begin H.S end
 1997 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2039 1517
a
SDict begin H.R end
 2039 1517 a 2039 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 2039 1579 a 2053 1567 a

 2053
1567 a 2053 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2053 1579 a
SDict begin H.S end
 2053 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2128 1517
a
SDict begin H.R end
 2128 1517 a 2128 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2128 1579 a 2128 1579 a
SDict begin H.S end
 2128
1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 2219 1517 a
SDict begin H.R end
 2219 1517 a 2219 1579 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 2219
1579 a 2234 1567 a

 2234 1567 a 2234 1567 a


 pgfo

 save

 0.128 0 0.19 0.28 setcmykcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1579
a
SDict begin H.S end
 2234 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk 0.128 0 0.19 0.28
TeXcolorcmyk 2292 1517 a
SDict begin H.R end
 2292 1517 a 2292 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292
1579 a 2292 1579 a
SDict begin H.S end
 2292 1579 a 0.128 0 0.19 0.28 TeXcolorcmyk
0.128 0 0.19 0.28 TeXcolorcmyk 2342 1517 a
SDict begin H.R end
 2342 1517
a 2342 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1579 a 2342 1579 a
SDict begin H.S end
 2342 1579 a 0.128 0 0.19 0.28
TeXcolorcmyk 0.128 0 0.19 0.28 TeXcolorcmyk 2400 1517
a
SDict begin H.R end
 2400 1517 a 2400 1579 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400 1579 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-509 -600 a
SDict begin H.S end
 -509 -600 a -509 -600 a
SDict begin 13.6 H.A end
 -509 -600 a -509
-600 a
SDict begin [/View [/XYZ H.V]/Dest (Outline2) cvn /DEST pdfmark end
 -509 -600 a 0 TeXcolorgray 0 TeXcolorgray 731
137 a Fg(P)l(a)l(rt)45 b(I)t(I)p 0 TeXcolorgray -509
270 a

 -509 270 a -509 270 a


 pgfo

 save

 0 setgray

 0.3985 pgfw
 0.32 0 0.47499 0.7 TeXcolorcmyk
 -4.00005 -1.0 moveto

 -4.00005 1.2 -2.20001 3.00003 0.0 3.00003 curveto

 341.02087 3.00003 lineto

 343.2209 3.00003 345.02094 1.2 345.02094 -1.0 curveto

 345.02094 -3.48697 lineto

 -4.00005 -3.48697 lineto

 pgffill

0 TeXcolorgray
 newpath

 restore

 pgfc


 -509 593 a

 -509 593 a -509 593 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 [1.0 0.0 0.0 1.0 0.0 -7.00008 ] concat

 pgfs


 -509
593 a

 -509 593 a -509 593 a


 pgfo

 4.00005 4.00005 4.00005 4.00005 pgfR1 0.0 1 1 1 0.5 0.5 0.5 pgfshade
 0.5 0.5 0.5 0.0 pgfR2

 pgfc


 -509 593 a


 pgfr

 restore

 save

 9.00009 9.00009 340.02087 -7.00008 pgfe

 clip

 newpath

 save

 [1.0 0.0 0.0 1.0 333.02078 -7.00009 ] concat

 pgfs


 -509 593 a

 -509
593 a -509 593 a


 pgfo

 8.00009 8.00009 8.00009 8.00009 pgfR1 4.00005 1 1 1 0.5 0.5 0.5 pgfshade
0.0 0.5 0.5 0.5 0.5 0.5 0.5 pgfshade  0.5 0.5 0.5 0.0 pgfR2

 pgfc


 -509 593 a


 pgfr

 restore

 restore

 save

 5.00005 337.02083 4.00005 -7.00008 pgfe

 clip

 newpath

 save

 [1.0 0.0 0.0 1.0 4.00005 -7.00008 ] concat

 pgfs


 -509 593 a

 -509 593 a -509
593 a


 pgfo

 8.00009 5669.36443 0.0 0.0 pgfe

 clip

 newpath

 8.00009 5669.36443 pgfV 4.00005 0.5 0.5 0.5 0.5 0.5 0.5 pgfshade 0.0
0.5 0.5 0.5 1 1 1 pgfshade  pop

 pgfc


 -509 593 a


 pgfr

 restore

 restore

 save

 37.84357 4.00005 345.02094 1.0 pgfe

 clip

 newpath

 save

 [1.0 0.0 0.0 1.0 341.02087 29.84346 ] concat

 pgfs


 -509 593 a

 -509 593 a -509 593 a


 pgfo

 4.00005 4.00005 4.00005 4.00005 pgfR1 0.0 1 1 1 0.5 0.5 0.5 pgfshade
 0.5 0.5 0.5 0.0 pgfR2

 pgfc


 -509
593 a


 pgfr

 restore

 32.84352 4.00005 345.02094 1.0 pgfe

 clip

 newpath

 save

 [0.0 1.0 -1.0 0.0 349.02098 -3.00003 ] concat

 pgfs


 -509 593 a

 -509 593 a -509 593 a


 pgfo

 8.00009 5669.36443 0.0 0.0 pgfe

 clip

 newpath

 8.00009 5669.36443 pgfV 4.00005 0.5 0.5 0.5 0.5 0.5 0.5 pgfshade 0.0
0.5 0.5 0.5 1 1 1 pgfshade  pop

 pgfc


 -509 593 a


 pgfr

 restore

 restore

 0.32 0 0.47499 0.7 setcmykcolor

 -4.00005 1.0 moveto

 -4.00005 -1.2 -2.20001 -3.00003 0.0 -3.00003 curveto

 341.02087 -3.00003 lineto

 343.2209 -3.00003 345.02094 -1.2 345.02094 1.0 curveto

 345.02094 38.32677 lineto

 -4.00005 38.32677 lineto

 pgffill
 0.5
TeXcolorgray
 0.0 pgfw

 345.02094 -0.49998 moveto

 345.02094 34.84352 lineto

 pgfstr
 0.69 TeXcolorgray
 345.02094 34.84352 moveto

 345.02094 35.84352 lineto

 pgfstr
 0.81 TeXcolorgray
 345.02094 35.84352 moveto

 345.02094 36.84352 lineto

 pgfstr
 0.94
TeXcolorgray
 345.02094 36.84352 moveto

 345.02094 37.84352 lineto

 pgfstr
 1 TeXcolorgray
 345.02094 37.84352 moveto

 345.02094 39.34354 lineto

 pgfstr
 0.94 TeXcolorgray 0.81 TeXcolorgray
0.69 TeXcolorgray 0.5 TeXcolorgray 0 TeXcolorgray
 newpath

 restore

 pgfc


 1 TeXcolorgray
1 TeXcolorgray 557 489 a
SDict begin H.S end
 557 489 a 1 TeXcolorgray Fg(Thank)g(Y)-11
b(ou)45 b(!)p 1 TeXcolorgray 1266 390 a
SDict begin H.R end
 1266 390 a 1266
489 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation3) cvn H.B /ANN pdfmark end
 1266 489 a 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.16 0 0.23749 0.84999
TeXcolorcmyk 0.16 0 0.23749 0.84999 TeXcolorcmyk -600
1668 1008 72 v 0.16 0 0.23749 0.84999 TeXcolorcmyk 0
TeXcolorgray 1 TeXcolorgray -352 1646 a Ff(June'15)36
b(\(I)q(IT)18 b(Bomba)o(y)q(\))p 0 TeXcolorgray 0.16 0 0.23749 0.84999
TeXcolorcmyk 0 TeXcolorgray 0.24 0 0.35625 0.775 TeXcolorcmyk
0.24 0 0.35625 0.775 TeXcolorcmyk 408 1668 V 0.24 0 0.35625 0.775
TeXcolorcmyk 0 TeXcolorgray 1 TeXcolorgray 413 1656 a
SDict begin H.S end

413 1656 a 1 TeXcolorgray -10 x Ff(Incremental)e(Data)j(Flo)o(w)f
(analysis)h(using)g(PRISM)p 1 TeXcolorgray 1411 1611
a
SDict begin H.R end
 1411 1611 a 1411 1646 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1411 1646 a 0 TeXcolorgray
0.24 0 0.35625 0.775 TeXcolorcmyk 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0.32 0 0.47499 0.7 TeXcolorcmyk 1416 1668
1008 72 v 0.32 0 0.47499 0.7 TeXcolorcmyk 0 TeXcolorgray
1 TeXcolorgray 854 w Ff(3)f(/)g(3)p 0 TeXcolorgray 0.32 0 0.47499 0.7
TeXcolorcmyk 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2333 1668 a
SDict begin H.S end
 2333 1668 a 2333 1668 a
SDict begin H.R end
 2333 1668 a 2333
1668 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation3) cvn /DEST pdfmark
end
 2333 1668 a 2333 1668 a
SDict begin H.S end
 2333 1668 a 2333 1668
a
SDict begin H.R end
 2333 1668 a 2333 1668 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 2333 1668 a 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
